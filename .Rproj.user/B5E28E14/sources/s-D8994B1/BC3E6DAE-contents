---
title: "Maxquant Summary.txt Quick View"
author: suggestions to "imetalabca@gmail.com"
date: "`r Sys.time()`"
output:
  html_document:
    fig_width: 10
    fig_caption: TRUE
    toc: true
    toc_depth: 4
    toc_float:
      collapsed: TRUE
      smooth_scroll: TRUE
    number_sections: true
params:  
  summary_file_tbl: !r 1 ### note that the value is the real value, here supposed to be a read in data.table for one click function.  
---

<style type="text/css">
.main-container {
  max-width: 1400px;
  margin-left: auto;
  margin-right: auto;
}
</style>


```{r setup, include=FALSE}
# enviroment setup
knitr::opts_chunk$set(echo = FALSE,warning = FALSE, message = FALSE, cache = TRUE)

library(tidyverse)
library(ggplot2)
library(plotly)
#library(plotly)
#library(DT) # for interactive data table display 

# local usage test and debug
# rmarkdown::render("MQ_report_summary_ocpu.Rmd", params = list(summary_file_tbl =  your_readin_tbl))
# on local machine, your_readin_tbl is a data table, while on ocpu, your_readin_tbl is a json formatted table

# version control
# 20190807


```



```{r function_needed, recho=FALSE}

tidy_MQ_summary <- function(df_summary.txt){
  # the format of summary.txt mainly fall into three categories
  
  # df_summary.txt has to be a tidyverse tbl format, from read_tsv
  # take out the last line to organize into a data.frame
  
  last_line <- t(df_summary.txt[nrow(df_summary.txt),])
  last_line[last_line[,1] == ""] <- NA
  last_line[last_line[,1] == "0"] <- NA
  last_line <- last_line[-1,, drop = FALSE]
  last_line <- last_line[which(!is.na(last_line[,1])),, drop =  FALSE]
  colnames(last_line) <- ("values")
  
  summary <- df_summary.txt[-nrow(df_summary.txt),] # remove the last line
  
  # take out rows about raw files summary 
  
  # if there are experiment design column, 
  if(length(grep("Experiment", colnames(summary)))>0){
    
    # and if there are separate rows for experimental desgin,
    # otherwise, expereiment desgin is set with one raw file one experiment 
    if(length(which(is.na(summary$Experiment))) > 0){
     df_rawfiles <-summary[!is.na(summary$Experiment),]
  
      # take out rows about experiment summary
      df_experiment <- summary[is.na(summary$Experiment),]
    
      
      return(list("summary_all" = last_line,
                  "summary_rawfiles" = df_rawfiles,
                  "summary_experiment" = df_experiment,
                  "set_experiment" = TRUE
                  
      ))
    }else{
      
     df_rawfiles <-  summary
      return(list("summary_all" = last_line,
                  "summary_rawfiles" = df_rawfiles,
                  "set_experiment" = FALSE # even with experiment setup, still no need to do
                  
      ))
      
    }
    
    # otherwise no need to do separate experiment display

  }else{
      df_rawfiles <-  summary
      return(list("summary_all" = last_line,
                  "summary_rawfiles" = df_rawfiles,
                  "set_experiment" = FALSE
                  
      ))
    
  }
  
  
}

```



```{r file_summary, echo=FALSE,fig.width= 15,fig.height=10}


# input
if(length(params$summary_file_tbl) == 1){
  # test with local test with local files in the same dir,
  df_summary.txt  <- read.delim("summary2.txt", header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)

}else{
  # opencpu render from data table by parametrized input
  df_summary.txt <- params$summary_file_tbl
}



summary_file_summary <- tidy_MQ_summary(df_summary.txt)


df_all <- as.data.frame(t(summary_file_summary$summary_all))


```


# Take-home figures



*  **Peptide Sequences Identified in total: ** `r df_all["Peptide Sequences Identified"]`

*  **Avearge ms/ms identification rate(%): ** `r df_all["MS/MS Identified [%]"]`

*  **Average mass deviation(ppm): ** `r df_all["Av. Absolute Mass Deviation [ppm]"]`





# MSMS id rate by raw file


```{r echo=FALSE,fig.width= 8,fig.height=6}

raw <-summary_file_summary$summary_rawfiles

data.frame <- data.frame(rawfile= raw[["Raw file"]], msms_id_rate = raw[["MS/MS Identified [%]"]])

# in case some column names are not valid names (containign special symbol, like space, % etc)
colnames(data.frame) <- c("names","value")

data.frame$plot_order_x <- 1: nrow(data.frame) # this column is going to be used as x axis

# of there is no grouping information, give all rows the same group

group <- "All"
data.frame$All = "All"

cutoff <- 10
xlabel <-  "MS/MS ID %"
maintitle <- "MSMS ID Rate"


## find more plot in the subfunction_general_update MQ_QC_plot
scatter_plot <- ggplot(data.frame) + 
      #annotate("rect", xmin=-Inf, xmax= Inf, ymin=0, ymax=cutoff, alpha=0.1, fill="red") +
      #annotate("rect", xmin=-Inf, xmax=Inf, ymin=cutoff, ymax=Inf, alpha=0.5, fill="lightblue") +
      geom_point(aes_string(x = "plot_order_x", y = "value", colour = group)) +
      geom_hline(yintercept = cutoff, linetype="dashed", color = "blue", size=1) +
      #scale_x_continuous(breaks = 1:nrow(data.frame),labels = data.frame[,1]) +
      labs(title = maintitle, x = "", y = xlabel) + 
      theme_bw() +
      theme(plot.title = element_text(hjust = 0.5),
            axis.text.x = element_text(angle = 90, hjust = 1),
            panel.grid = element_blank())
    

scatter_plot




violin_plot <- ggplot(data.frame) +
  geom_violin(aes_string(x =group,  y = "value", colour = group, fill = group))+
  geom_jitter(aes_string(x =group,  y = "value",colour = group, fill = group),shape=21)  +
  geom_hline(yintercept = cutoff, linetype="dashed", color = "blue", size=1) +
  labs(title = maintitle,  x = "",y = xlabel) + 
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 90, hjust = 1),
        panel.grid = element_blank())

scatter_plot

violin_plot

#ggplotly(scatter_plot)
#ggplotly(violin_plot)




```



`r if(summary_file_summary$set_experiment){ "# Peptide sequence id by Experiment"}`


```{r id_by_experiment, echo=FALSE,fig.width= 8,fig.height=6}

if(summary_file_summary$set_experiment){
  exp <- summary_file_summary$summary_experiment
  colnames(exp)[1] <- "experiment"
  p <-ggplot2::ggplot(data=exp, aes(x=experiment, y=`Peptide Sequences Identified`)) +
    geom_bar(stat="identity") + coord_flip()+
    theme_bw()
  
  plotly::ggplotly(p)
}



```

```{r echo=FALSE,fig.width= 8,fig.height=6}

if(summary_file_summary$set_experiment){
  df_exp_id <- data.frame(id = "id",peptides = exp$`Peptide Sequences Identified`)

  p<- ggplot2::ggplot(data=df_exp_id, aes(x = id, y=peptides)) +
  geom_boxplot(outlier.colour="red", outlier.shape=16,outlier.size=5, notch=TRUE)+
  geom_jitter(shape=16, position=position_jitter(0.2))+
  theme_bw()

  plotly::ggplotly(p)

}
# Basic box plot



```

```{r echo=FALSE,fig.width= 8,fig.height=6}
if(summary_file_summary$set_experiment){
  p<- ggplot2::ggplot(data=df_exp_id, aes(peptides)) +
    geom_vline(aes(xintercept=mean(peptides)),color="blue", linetype="dashed", size=2)+
  geom_histogram(aes(y=..density..),color= "black",fill="white")+
  geom_density(alpha=.2, fill="#FF6666")+
  theme_bw()

plotly::ggplotly(p)
}
# histogram



```


# peptide sequence id by raw file

**The result might look the same if the experimtal design is set to leave each rawfile as an experiment**



```{r echo=FALSE,fig.width= 8,fig.height=6}

raw <-summary_file_summary$summary_rawfiles

p <-ggplot2::ggplot(data=raw, aes(x=`Raw file`, y=`Peptide Sequences Identified`)) +
  geom_bar(stat="identity") + coord_flip()+
  theme_bw()

plotly::ggplotly(p)

```



```{r echo=FALSE,fig.width= 8,fig.height=6}


# Basic box plot

df_raw_id <- data.frame(rawfiles = "id",peptides = raw$`Peptide Sequences Identified`)
row.names(df_raw_id) <- raw$`Raw file`

p<- ggplot2::ggplot(data=df_raw_id, aes(x = rawfiles, y=peptides)) +
  geom_boxplot(outlier.colour="red", outlier.shape=16,outlier.size=5, notch=TRUE)+
  geom_jitter(shape=16, position=position_jitter(0.2))+
  theme_bw()

plotly::ggplotly(p)

```


```{r echo=FALSE,fig.width= 8,fig.height=6}

# histogram

p<- ggplot2::ggplot(data=df_raw_id, aes(peptides)) +
  geom_vline(aes(xintercept=mean(peptides)),color="blue", linetype="dashed", size=2)+
  geom_histogram(aes(y=..density..),color= "black",fill="white")+
  geom_density(alpha=.2, fill="#FF6666")+
  theme_bw()

ggplotly(p)

```




# Average performance

check the averaged performance from all raw files:

```{r echo=FALSE}
nrows <- nrow(summary_file_summary$summary_all)
DT::datatable(summary_file_summary$summary_all,options = list(pageLength = nrows))

```

