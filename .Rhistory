data("LeMis")
(graphjs(LeMis))
(graphjs(LeMis, vertex.shape=V(LeMis)$label))
data("ego")
(graphjs(ego, bg="black"))
# A shiny example
shiny::runApp(system.file("examples/graph", package="threejs"))
data("LeMis")
graphjs(LeMis,
layout=list(
layout_randomly(LeMis, dim=3),
layout_on_sphere(LeMis),
layout_with_drl(LeMis, dim=3),  # note! somewhat slow...
layout_with_fr(LeMis, dim=3, niter=30)),
main=list("random layout", "sphere layout", "drl layout", "fr layout"),
fpl=300)
g <- make_ring(5) - edges(1:5)
graph_list <- list(
g + edge(1, 2),
g + edge(1, 2) + edge(2, 3),
g + edge(1, 2) + edge(2, 3) + edge(3, 4),
g + edge(1, 2) + edge(2, 3) + edge(3, 4) + edge(4, 5),
g + edge(1, 2) + edge(2, 3) + edge(3, 4) + edge(4, 5) + edge(5, 1))
graphjs(graph_list, main=paste(1:5),
vertex.color=rainbow(5), vertex.shape="sphere", edge.width=3)
library(crosstalk)
library(DT)
data(LeMis)
sd = SharedData$new(data.frame(Name = V(LeMis)$label))
print(bscols(
graphjs(LeMis, brush=TRUE, crosstalk=sd),
datatable(sd, rownames=FALSE, options=list(dom='tp'))
))
?bscols
data(LeMis)
sd = SharedData$new(data.frame(Name = V(LeMis)$label))
print(bscols(widths = c(2, 4),
graphjs(LeMis, brush=TRUE, crosstalk=sd),
datatable(sd, rownames=FALSE, options=list(dom='tp'))
))
print(bscols(widths = c(8, 4),
graphjs(LeMis, brush=TRUE, crosstalk=sd),
datatable(sd, rownames=FALSE, options=list(dom='tp'))
))
print(bscols(widths = c(4, 8),
graphjs(LeMis, brush=TRUE, crosstalk=sd),
datatable(sd, rownames=FALSE, options=list(dom='tp'))
))
print(bscols(widths = c(10, 2),
graphjs(LeMis, brush=TRUE, crosstalk=sd),
datatable(sd, rownames=FALSE, options=list(dom='tp'))
))
print(bscols(widths = c(8, 4),
graphjs(LeMis, brush=TRUE, crosstalk=sd),
datatable(sd, rownames=FALSE, options=list(dom='tp'))
))
bscols(widths = c(2, 4),
div(style = css(width="100%", height="400px", background_color="red")),
div(style = css(width="100%", height="400px", background_color="blue")),
div(style = css(width="100%", height="400px", background_color="red")),
div(style = css(width="100%", height="400px", background_color="blue"))
)
library(htmltools)
bscols(widths = c(2, 4),
div(style = css(width="100%", height="400px", background_color="red")),
div(style = css(width="100%", height="400px", background_color="blue")),
div(style = css(width="100%", height="400px", background_color="red")),
div(style = css(width="100%", height="400px", background_color="blue"))
)
bscols(widths = c(2, NA, NA),
div(style = css(width="100%", height="400px", background_color="red")),
div(style = css(width="100%", height="400px", background_color="blue")),
div(style = css(width="100%", height="400px", background_color="green"))
)
bscols(
div(style = css(width="100%", height="400px", background_color="red")),
div(style = css(width="100%", height="400px", background_color="blue"))
)
getwd()
setwd("C:/Users/Figeys Lab/OneDrive/Project_Rlearning/scater")
#library(canvasXpress)
library(scater)
library(scater)
#library(canvasXpress)
library(scater)
library(scRNAseq)
setwd("C:/Users/Figeys Lab/OneDrive/Project_Rlearning/scater")
knitr::opts_chunk$set(echo = FALSE,warning = FALSE, message = FALSE, cache = FALSE)
#library(canvasXpress)
library(scater)
library(scRNAseq)
example_sce <- ZeiselBrainData()
library(scRNAseq)
example_sce <- ZeiselBrainData()
?ZeiselBrainData
#library(canvasXpress)
library(scater)
example_sce <- ZeiselBrainData()
library(scRNAseq)
?ZeiselBrainData
?ZeiselBrainData
library(SingleCellExperiment)
counts <- matrix(rpois(100, lambda = 10), ncol=10, nrow=10)
sce <- SingleCellExperiment(assays = list(counts = counts))
sce
?counts
dim(counts)
?SingleCellExperiment
Sys.time()
Sys.date(0)
Sys.date()
Sys.Date()
Sys.tate()
Sys.time()
setwd("C:/Users/Figeys Lab/Dropbox/Project_R_packages/rmdocpu/inst/rmd")
getwd()
setwd("C:/Users/Figeys Lab/Dropbox/Project_R_packages/rmdocpu/inst/rmd")
url_api <- "http://206.12.91.148/ocpu/library/rmdocpu/R/render_proteinGroups_file"
url_api_split <- strsplit(url_api, "/")[[1]]
url_server<- paste0(url_api_split[1],"//", url_api_split[3],"/")
# upload file and do the rendering
# in this case, the proteinGroups.txt is in the working dir. it can be anywhere with the path
# variable r is the returning information from the curl function
r <- httr::POST(url_api, body = list(file = httr::upload_file("final_proteins.tsv")))
r
paths <- strsplit(rawToChar(r$content), "\n")[[1]]
paths
# upload file and do the rendering
# in this case, the proteinGroups.txt is in the working dir. it can be anywhere with the path
# variable r is the returning information from the curl function
r <- httr::POST(url_api, body = list(file = httr::upload_file("proteinGroups1.txt")))
r
# test on locoal rmd
data_table  <- read.delim("proteinGroups1.txt", header = TRUE,check.names = FALSE, stringsAsFactors = FALSE) # NOTE the read in options
meta_table
rmarkdown::render("MQ_report_proteinGroups.Rmd",output_format = "html_document", params = list(input_datatable =  data_table, meta_table = meta_table), output_file="output.html")
paths <- strsplit(rawToChar(r$content), "\n")[[1]]
path_target <- paths[grep("output.html",paths)]
paths
# save/download the report file to local storage
# the file  "maxquant_result_summary.html" now is the report
curl::curl_download(paste0(url_server, path_target), "report_proteinGroups_summary.html")
rmarkdown::render("MQ_report_proteinGroups.Rmd",output_format = "html_document", params = list(input_datatable =  data_table), output_file="output.html")
# test on locoal rmd
data_table  <- read.delim("proteinGroups1.txt", header = TRUE,check.names = FALSE, stringsAsFactors = FALSE) # NOTE the read in options
rmarkdown::render("MQ_report_proteinGroups.Rmd",output_format = "html_document", params = list(input_datatable =  data_table), output_file="output.html")
source("https://raw.githubusercontent.com/ningzhibin/rmdocpu/master/inst/subfunctions_general.r")
source("https://raw.githubusercontent.com/ningzhibin/rmdocpu/master/inst/subfunctions_general_update.r")
knitr::opts_chunk$set(echo = FALSE,warning = FALSE, message = FALSE, cache = FALSE)
library(tidyverse)
library(ggplot2)
library(d3heatmap)
library(plotly)
tidy_proteingroups <- function(proteinGroups){
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(proteinGroups$"Protein IDs"), ";| ") # this is a list of list of split names ; for maxquant result, space( ) for Kai's open-search result
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
#rownames(proteinGroups) <- protein_primary_ids # rename the rownames of the matrix
# do the row wise filtering
index_contaminant <- grep("\\+",proteinGroups[,grep( "ontaminant", colnames(proteinGroups))]) # note that + is a special character
index_reverse <- grep("\\+", proteinGroups$Reverse)
index_to_remove <- c(index_contaminant,index_reverse)
if(length(index_to_remove) >0){
proteinGroups <- proteinGroups[-index_to_remove,] # filtered table
protein_primary_ids <- protein_primary_ids[-index_to_remove] # filtered ids
}
n_contaminant <- length(index_contaminant)
n_reversed <- length(index_reverse)
# extra the intensity column matrix
if(any(grepl("LFQ intensity ", colnames(proteinGroups)))){ # if there are LFQ intensity columns, take out the LFQ columns
intensity_columns <- proteinGroups[,grep("LFQ intensity ", colnames(proteinGroups))]
colnames(intensity_columns)<-gsub("LFQ intensity ", "", colnames(intensity_columns))
}else{ # otherwise take out intensity columnï¼Œ even only one column
intensity_columns <-   proteinGroups[,grep("Intensity ", colnames(proteinGroups)),drop =  FALSE]
colnames(intensity_columns)<-gsub("Intensity ", "", colnames(intensity_columns))
}
return(list("intensity_matrix" = intensity_columns,
"n_contaminant" = n_contaminant,
"n_reversed" = n_reversed,
"n_unique_peptides" = proteinGroups$"Unique peptides",
"score" = proteinGroups$Score,
"protein_primary_ids" =protein_primary_ids
))
}
if(is.null(params$input_datatable)){
# test with local test with local files in the same dir,
proteinGroups.txt <- read.delim("proteinGroups.txt", header = TRUE,check.names = FALSE, stringsAsFactors = FALSE)
}else{
# opencpu render from data table by parametrized input
proteinGroups.txt <- params$input_datatable
}
head(proteinGroups.txt)
meta_table <- params$meta_table
# if there is any null value in the meta colum, set the meta as NULL
if(any(is.na(meta_table$meta1))){
meta_table <- NULL
}
head(meta_table)
proteingroups_tidyed <- tidy_proteingroups(proteinGroups.txt)
rm(proteinGroups.txt)
df_intensity <- proteingroups_tidyed$intensity_matrix
sparsity <- rowSums(df_intensity > 0) # here sparsity is number of present values
index_all_na_rows <- which(sparsity == 0)
df_intensity <- df_intensity[-index_all_na_rows,,drop = FALSE]
protein_primary_ids <- proteingroups_tidyed$protein_primary_ids[-index_all_na_rows]
proteingroups_tidyed$n_contaminant
proteingroups_tidyed$n_reversed
peptide_summary <- as.data.frame(table(proteingroups_tidyed$n_unique_peptides))
colnames(peptide_summary) = c("Unique_Peptides", "Freq")
p<- ggplot2::ggplot(data = peptide_summary)+
geom_col(aes(x = Unique_Peptides,y = Freq))+
theme_bw()
plotly::ggplotly(p)
df_score <- data.frame(Score  = proteingroups_tidyed$score)
rm(proteingroups_tidyed)
p<- ggplot2::ggplot(data=df_score, aes(Score)) +
geom_histogram(aes(y=..density..),color= "black",fill="white")+
geom_density(alpha=.2, fill="#FF6666")+
theme_bw()
plotly::ggplotly(p)
df_sparsity <- as.data.frame(table(sparsity))
p<- ggplot2::ggplot(data = df_sparsity)+
geom_col(aes(x = sparsity,y = Freq))+
xlab("Presence in the Protein Intensity Matrix")+
theme_bw()
plotly::ggplotly(p)
df_intensity_log10 <-log10(df_intensity)
data_matrix_log10_melt<-reshape2::melt(as.matrix(df_intensity_log10))
colnames(data_matrix_log10_melt) <- c("Proteins", "Samples", "Log10(Inensity)")
p<-ggplot(data_matrix_log10_melt)+
geom_boxplot(aes(x = Samples, y = `Log10(Inensity)`)) +
theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
plotly::ggplotly(p)
rm(p)
rm(data_matrix_log10_melt)
if(ncol(df_intensity) > 1){
df_intensity_log10 <-log10(df_intensity+1)
rownames(df_intensity_log10) <- protein_primary_ids
d3heatmap::d3heatmap(df_intensity_log10,show_grid = FALSE, color = "OrRd")
}
if(ncol(df_intensity) > 3){ # otherwise, no point to do PCA
df_intensity_log10 <- log10(df_intensity+1)
if(is.null(meta_table)){
#pca <-PCA_wrapper_prcomp2(data_matrix = as.matrix(df_intensity_log10), inputation = TRUE)
PCA_result <- prcomp(t(df_intensity_log10))
loading <- as.data.frame(PCA_result$x)
#plot(loading$PC1, loading$PC2)
#plot_ly(data = loading, x = ~PC1, y = ~PC2) %>% add_markers() %>% add_text(text = row.names(loading))
p1 <- plot_ly(loading, x = ~PC1, y = ~PC2, z = ~PC3) %>%
add_markers() %>%
add_text(text = row.names(loading))
# for screen plot
sd <- PCA_result$sde
var <- sd^2
var.percent <- var/sum(var) * 100
PCs <- paste("PC", 1:length(var.percent))
df_scree <- data.frame(PC  = factor(PCs, levels = PCs), ratio =var.percent)
p2 <- plot_ly(data = df_scree,x = ~PC, y = ~ratio, type = "bar") %>%
layout(title = "Scree Plot of Principle components", xaxis = list(title = 'Principle Component'), yaxis = list(title = 'Variance(%)'))
htmltools::tagList(list(p1, p2))
}else{
# do pca analysis with meta groupign information
pca <-PCA_wrapper_prcomp2(data_matrix = as.matrix(df_intensity_log10), data_meta =  meta_table[,c(2,3)], inputation = TRUE)
# plotting
print(pca$pca_scree_plot)
cat("Scree plot ##  shows the performance of the PCA analysis, the more percentage the top procomponets accounts, the better separation")
print(pca$pca_component_plot)
cat("2d PCA Component plot ##")
print(pca$pca_confidence)
cat("2d PCA Component plot ## with confidence boundaries")
print(pca$pca_component_plot_kmeans)
cat("2d PCA Component plot with K-means grouping, which is non-supervised grouping ")
pca$pca_component_plot_3d_interactive
}
}
if(length(unique(meta_table[,3])) >=2 && all(table(meta_table[,3]) >=2)){
pvalues_anova <- matrix_PostHoc(df_intensity,meta_table[,3])
df_intensity_p <- cbind(pvalues_anova, df_intensity)
rownames(df_intensity_p) <- protein_primary_ids
df_intensity_p_filtered <- df_intensity_p[which(!is.na(df_intensity_p$p_PostHoc_pairs)),]
DT::datatable(df_intensity_p_filtered, extensions = 'Buttons',options = list(dom = "Blfrtip",scrollX=TRUE, buttons = list('copy', 'print', list(
extend = 'collection',
buttons = c('csv', 'excel', 'pdf'),
text = 'Download'
))))
}
df_intensity <- as.data.frame(df_intensity)
rownames(df_intensity) <- protein_primary_ids
DT::datatable(df_intensity, extensions = 'Buttons',options = list(dom = "Blfrtip",scrollX=TRUE, buttons =       list('copy', 'print', list(
extend = 'collection',
buttons = c('csv', 'excel', 'pdf'),
text = 'Download'
))))
head(
df_intensity
)
DT::datatable(df_intensity, extensions = 'Buttons',options = list(dom = "Blfrtip",scrollX=TRUE, buttons =       list('copy', 'print', list(
extend = 'collection',
buttons = c('csv', 'excel', 'pdf'),
text = 'Download'
))))
unlink('MQ_report_proteinGroups_cache', recursive = TRUE)
if(is.null(params$input_datatable)){
# test with local test with local files in the same dir,
proteinGroups.txt <- read.delim("final_proteins.tsv", header = TRUE,check.names = FALSE, stringsAsFactors = FALSE)
}else{
# opencpu render from data table by parametrized input
proteinGroups.txt <- params$input_datatable
}
head(proteinGroups.txt)
url_api <- "http://206.12.91.148/ocpu/library/rmdocpu/R/render_proteinGroups_file"
# get the root url
url_api_split <- strsplit(url_api, "/")[[1]]
url_server<- paste0(url_api_split[1],"//", url_api_split[3],"/")
# upload file and do the rendering
# in this case, the proteinGroups.txt is in the working dir. it can be anywhere with the path
# variable r is the returning information from the curl function
r <- httr::POST(url_api, body = list(file = httr::upload_file("final_proteins.tsv")))
#r <- httr::POST(url_api, body = list(file = httr::upload_file("proteinGroups1.txt"), meta = httr::upload_file("proteinGroups1_meta.txt")), httr::timeout(200000))
r
#
paths <- strsplit(rawToChar(r$content), "\n")[[1]]
path_target <- paths[grep("output.html",paths)]
paths
r <- httr::POST(url_api, body = list(file = httr::upload_file("final_proteins.tsv")))
#r <- httr::POST(url_api, body = list(file = httr::upload_file("proteinGroups1.txt"), meta = httr::upload_file("proteinGroups1_meta.txt")), httr::timeout(200000))
r
paths <- strsplit(rawToChar(r$content), "\n")[[1]]
path_target <- paths[grep("output.html",paths)]
paths
url_api <- "http://206.12.91.148/ocpu/library/rmdocpu/R/render_MQsummary_file"
# upload file and do the rendering
# in this case, the proteinGroups.txt is in the working dir. it can be anywhere with the path
# variable r is the returning information from the curl function
r <- httr::POST(url_api, body = list(file = httr::upload_file("final_proteins.tsv")))
r
paths <- strsplit(rawToChar(r$content), "\n")[[1]]
path_target <- paths[grep("output.html",paths)]
paths
r$content
paths
getwd()
url_api <- "http://206.12.91.148/ocpu/library/rmdocpu/R/render_proteinGroups_file"
# get the root url
url_api_split <- strsplit(url_api, "/")[[1]]
url_server<- paste0(url_api_split[1],"//", url_api_split[3],"/")
# upload file and do the rendering
# in this case, the proteinGroups.txt is in the working dir. it can be anywhere with the path
# variable r is the returning information from the curl function
r <- httr::POST(url_api, body = list(file = httr::upload_file("final_proteins.tsv")))
#r <- httr::POST(url_api, body = list(file = httr::upload_file("proteinGroups1.txt"), meta = httr::upload_file("proteinGroups1_meta.txt")), httr::timeout(200000))
r
paths <- strsplit(rawToChar(r$content), "\n")[[1]]
path_target <- paths[grep("output.html",paths)]
paths
gc()
memory.limit()
?memory.limit
memory.size()
head(proteinGroups.txt)
dim(proteinGroups.txt)
source("https://raw.githubusercontent.com/ningzhibin/rmdocpu/master/inst/subfunctions_general.r")
source("https://raw.githubusercontent.com/ningzhibin/rmdocpu/master/inst/subfunctions_general_update.r")
# enviroment setup
knitr::opts_chunk$set(echo = FALSE,warning = FALSE, message = FALSE, cache = FALSE)
library(tidyverse)
library(ggplot2)
library(d3heatmap)
library(plotly)
#library(gplots)
#library(corrplot)
#library(DT) # for interactive data table display
# local usage test and debug
# rmarkdown::render("MQ_report_proteinGroups.Rmd", params = list(input_datatable =  your_readin_tbl))
# or with meta information
# rmarkdown::render("MQ_report_proteinGroups.Rmd", params = list(input_datatable =  your_readin_tbl, meta = your_meta_table))
p<- ggplot2::ggplot(data = peptide_summary)+
geom_col(aes(x = Unique_Peptides,y = Freq))+
theme_bw()
p
if(is.null(params$input_datatable)){
# test with local test with local files in the same dir,
proteinGroups.txt <- read.delim("final_proteins.tsv", header = TRUE,check.names = FALSE, stringsAsFactors = FALSE)
}else{
# opencpu render from data table by parametrized input
proteinGroups.txt <- params$input_datatable
}
# Note: The folling analysis with meta info assumes that
# 1st columns as sample name, 2nd column as experiment name, 3rd column and after as grouping
meta_table <- params$meta_table
# if there is any null value in the meta colum, set the meta as NULL
if(any(is.na(meta_table$meta1))){
meta_table <- NULL
}
# tidy
proteingroups_tidyed <- tidy_proteingroups(proteinGroups.txt)
tidy_proteingroups <- function(proteinGroups){
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(proteinGroups$"Protein IDs"), ";| ") # this is a list of list of split names ; for maxquant result, space( ) for Kai's open-search result
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
#rownames(proteinGroups) <- protein_primary_ids # rename the rownames of the matrix
# do the row wise filtering
index_contaminant <- grep("\\+",proteinGroups[,grep( "ontaminant", colnames(proteinGroups))]) # note that + is a special character
index_reverse <- grep("\\+", proteinGroups$Reverse)
index_to_remove <- c(index_contaminant,index_reverse)
if(length(index_to_remove) >0){
proteinGroups <- proteinGroups[-index_to_remove,] # filtered table
protein_primary_ids <- protein_primary_ids[-index_to_remove] # filtered ids
}
n_contaminant <- length(index_contaminant)
n_reversed <- length(index_reverse)
# extra the intensity column matrix
if(any(grepl("LFQ intensity ", colnames(proteinGroups)))){ # if there are LFQ intensity columns, take out the LFQ columns
intensity_columns <- proteinGroups[,grep("LFQ intensity ", colnames(proteinGroups))]
colnames(intensity_columns)<-gsub("LFQ intensity ", "", colnames(intensity_columns))
}else{ # otherwise take out intensity columnï¼Œ even only one column
intensity_columns <-   proteinGroups[,grep("Intensity ", colnames(proteinGroups)),drop =  FALSE]
colnames(intensity_columns)<-gsub("Intensity ", "", colnames(intensity_columns))
}
return(list("intensity_matrix" = intensity_columns,
"n_contaminant" = n_contaminant,
"n_reversed" = n_reversed,
"n_unique_peptides" = proteinGroups$"Unique peptides",
"score" = proteinGroups$Score,
"protein_primary_ids" =protein_primary_ids
))
}
proteingroups_tidyed <- tidy_proteingroups(proteinGroups.txt)
rm(proteinGroups.txt)
df_intensity <- proteingroups_tidyed$intensity_matrix
sparsity <- rowSums(df_intensity > 0) # here sparsity is number of present values
index_all_na_rows <- which(sparsity == 0)
df_intensity <- df_intensity[-index_all_na_rows,,drop = FALSE]
protein_primary_ids <- proteingroups_tidyed$protein_primary_ids[-index_all_na_rows]
peptide_summary <- as.data.frame(table(proteingroups_tidyed$n_unique_peptides))
colnames(peptide_summary) = c("Unique_Peptides", "Freq")
p<- ggplot2::ggplot(data = peptide_summary)+
geom_col(aes(x = Unique_Peptides,y = Freq))+
theme_bw()
p
dim(proteingroups_tidyed)
gc()
gc()
dim(proteingroups_tidyed$n_unique_peptides)
proteingroups_tidyed$n_unique_peptides
proteingroups_tidyed$n_unique_peptides
length(proteingroups_tidyed$n_unique_peptides)
peptide_summary
dim(df_intensity)
sparsity <- rowSums(df_intensity > 0)
head(sparsity)
View(df_intensity)
index_Q100 <- which(sparsity == ncol(df_intensity)) # index_Q100 is the index of Q100 peptide
head(index_Q100)
length(index_Q100)
df_intensity$total_intensity<- rowSums(df_intensity) # add total intensity column
df_intensity_topN <- dplyr::top_n(df_intensity, topN, total_intensity) # top 100 rows
library(dplyr)
df_intensity_topN <- dplyr::top_n(df_intensity, topN, total_intensity) # top 100 rows
topN = 100
df_intensity_topN <- dplyr::top_n(df_intensity, topN, total_intensity) # top 100 rows
dim(df_intensity_topN)
View(df_intensity_topN)
df_intensity_topN <-df_intensity_topN[, 1: (ncol(df_intensity_topN)-1)]
dim(df_intensity_topN)
# process
df_intensity <- proteingroups_tidyed$intensity_matrix
head(df_intensity)
r <- httr::POST(url_api, body = list(file = httr::upload_file("final_proteins.tsv")))
#r <- httr::POST(url_api, body = list(file = httr::upload_file("proteinGroups1.txt"), meta = httr::upload_file("proteinGroups1_meta.txt")), httr::timeout(200000))
r
# get all the paths of all files from the opencpu end, and locate the one, which is the report
# this step needs to be done in the script enviroment
paths <- strsplit(rawToChar(r$content), "\n")[[1]]
path_target <- paths[grep("output.html",paths)]
paths
# save/download the report file to local storage
# the file  "maxquant_result_summary.html" now is the report
curl::curl_download(paste0(url_server, path_target), "report_proteinGroups_summary.html")
file_path =  paste0(pre, file, post)
pre = "https://i.hamreus.com/ps1/j/JQM_DP/01/DlAm01-"
post = ".png.webp?e=1711945717&m=uHsXcv55Eeva6-ouhsiJWw"
file = "002"
file_path =  paste0(pre, file, post)
file_path
setwd("C:/Users/Figeys Lab/Dropbox/Project_R_packages/download_comics")
curl::curl_download(file_path, file_save)
file_save= "002.png"
curl::curl_download(file_path, file_save)
file_path
file = "004b"
file_save= "004b.png"
file_path =  paste0(pre, file, post)
file_path
curl::curl_download(file_path, file_save)
setwd("Z:/Microbiome/eggNOG5.0_database_organize")
#library("seqParser")
library(Rsamtools)
#fa <- FaFile("test_DNA.faa")
fa <- FaFile("e5.proteomes.faa")
fa_head <- FaFile("e5.proteomes_head1000.faa")
seq_info <- seqinfo(fa_head)
fa_head
seq_info
seq <- scanFa(fa, as  =  "AAStringSet")
getSeq(seq, seq_info@seqnames[1:2])
getSeq(fa, seq_info@seqnames[1:2])
seqnames(seq_info)
getSeq(fa, t@seqnames[1:2])
gr = as(seqinfo(fa), "GRanges")
getSeq(fa, gr[1])
