---
title: "Data Exploreation on bovine dataset"
author: "visualonline360@gmail.com"
date: "`r Sys.time()`"
output:
  html_document:
    fig_width: 10
    fig_caption: TRUE
    toc: true
    toc_depth: 4
    toc_float:
      collapsed: TRUE
      smooth_scroll: TRUE
    number_sections: true
---


<style type="text/css">
.main-container {
  max-width: 1800px;
  margin-left: auto;
  margin-right: auto;
}
</style>


```{r include =FALSE}
# version 0.5
# 20190613
# fixed a lot of bugs
# a lot of layout and comments
```




```{r setup, include = FALSE}
# this doc could be used a as general service report template 

# enviroment setup
knitr::opts_chunk$set(echo = FALSE,warning = FALSE, message = FALSE, cache = TRUE)
# if you have a large file (large dataset to process) to knit, set cache = TRUE to speed up the test process

source("subfunctions_general.r")
source("subfunctions_general_update.r")
library(tidyverse)
library(DT) # for interactive data table display 
library(clusterProfiler) # for general enrichment analysis
library(ReactomePA) # for pathway ananlysis
library(DOSE) # for disease enrichment analysis
# library(org.Hs.eg.db) # for human gene id converstion
library(org.Bt.eg.db) # for bovine
# check this link to download the database for your species
# browseURL(https://bioconductor.org/packages/release/BiocViews.html#___AnnotationData)


library(enrichplot)

# todo list: 
# debug the id subfunction
# nonparameter method to do the variable selection
# interactive network display
# ROC curve
# volcano plot

```



```{r data_preparation, eval=TRUE}

####################################################################
# parameter setting
####################################################################




# read in table, and match the gene name, then save the file
# read-in the expression file
df_pg <- read_tsv("Sample20-ProteinGroups(2)(1).txt", col_names  =  TRUE)


# for consistency,change the name
df_pg_exp_GSEA <- df_pg[,c(-1,-2,-3)]
df_pg_ID_exp_GSEA <- df_pg[,c(-2,-3)]

#setup the metadata
meta <- read.delim("Experiment_group.txt",header = FALSE)
colnames(meta) <- c("sample_Name", "Experiment_group")


# setup the two groups to compare
#groups_VS <- c("CK", "PCK")
#groups_VS <- c("CK", "HC")
groups_VS <- c("HC", "PHC")

#groups_VS <- c("PCK", "PHC")


```


===============================================================================================================

# Experimental Design


## data description


 **There are `r length(unique(meta[,1]))` samples: **
 
 `r levels(unique(meta[,1]))`

 **There are `r length(unique(meta[,2]))` groups: **
 
 `r levels(unique(meta[,2]))`


```{r table meta}
knitr::kable(meta, caption = 'Experimental design')
```


===============================================================================================================

## Expression Description

 **Overall raw intensity**


```{r plot display of raw intensity}
matrix_ggboxplot(as.matrix(df_pg_exp_GSEA), xlabel="Sample", ylabel = "Intensity", maintitle = "Intensity")$violinplot

#plot_distribution$boxplot
#plot_distribution$violinplot
```


===============================================================================================================

 **Overall log transformed intensity**

```{r plot display of log(intensity)}

plot_distribution <- matrix_ggboxplot(log10(as.matrix(df_pg_exp_GSEA)), xlabel="Sample", ylabel = "log10(Intensity)", maintitle = "Log10 Intensity")
plot_distribution$boxplot
plot_distribution$violinplot
```


===============================================================================================================

## heatmap and clustering 

  Display with the log10 intensity from all proteins


 **The following is from the data without scaling on rows(proteins)**

```{r heatmap without scaling}
matrix_quick_heatmap(log10(as.matrix(df_pg_exp_GSEA) +1 ),scale = "none", Col_tree = FALSE)

```


 **The following is from the data with scaling on rows(proteins)**


```{r}
matrix_quick_heatmap(log10(as.matrix(df_pg_exp_GSEA)),scale = "row", Col_tree = FALSE)

```


# PCA 

 **For overall data examination**




```{r PCA}
data_matrix <- log10(as.matrix(df_pg_exp_GSEA))
#rownames(data_matrix) <- 1:nrow(data_matrix) # it has to have row.names

pca_plsda <- PCA_PLSDA_wrapper(data_matrix = data_matrix+0.01, data_meta =  meta)
pca_plsda$plot_PCA_Scree
pca_plsda$plot_PCA_component


```

**Interactive 3D plot**

```{r}
pca <-PCA_wrapper_prcomp2(data_matrix, data_meta =  meta, inputation = TRUE)
pca$pca_component_plot_3d_interactive
```


# PLSDA 



 **Analysis to for key variable selection**

### Overall performance

```{r}
pca_plsda$plot_PLSDA_component
pca_plsda$plot_PLSDA_AUC

```

### heatmap with VIP filtering

PLSDA provides a powerful way to select the "important" features/variables to seperate the groups.
But do PLSDA is a supervised classification, with a great tendency of over fitting. 
DO NOT use the PLSDA result as PCA result. The grouping/classification does not mean the real differnce between samples. 



**heamap without VIP filtering**

```{r fig.width= 15,fig.height=10}
pca_plsda$plot_PLSDA_heatmap

```

**heamap with VIP >1**

```{r fig.width= 15,fig.height=10}
pca_plsda$plot_PLSDA_VIP_heatmap
```

### VIP filtering

 **VIP**


Variable importance in projection (VIP) coefficients reflects the relative importance of each X variable for each Y variate in the prediction model. VIP coefficients thus represent the importance of each X variable in fitting both the X- and Y-variates, since the Y-variates are predicted from the X-variates.

VIP allows to classify the X-variables according to their explanatory power of Y. Predictors with large VIP, larger than 1, are the most relevant for explaining Y.


```{r}
pca_plsda$plot_PLSDA_VIP
```



 **Table shows All VIPs for the first 3 componets**
 


```{r}
datatable(pca_plsda$data_PLSDA_VIP)
```


 
 **Table shows `r nrow(pca_plsda$data_PLSDA_VIP_filtered_features)` the features with VIP score (of the 1st component) > 1**
 
 These proteins/features can also be deemed as significantly changed proteins/features, and be used for downstream function analysis


```{r display_PLSDA_VIP}

#datatable(pca_plsda$data_PLSDA_VIP_filtered_features)
datatable(df_pg[as.numeric(row.names(pca_plsda$data_PLSDA_VIP_filtered_features)),])



```








# ANOVA

p value threshold is set to 0.05


```{r ANOVA}

# take out the expression matrix, change the name to the major protein id, for downstream statistics
df_pg_exp <- df_pg_exp_GSEA

pvalues_anova <- matrix_PostHoc(df_pg_exp,meta$Experiment_group)

df_pg_exp_p <- cbind(pvalues_anova, df_pg_exp_GSEA)

df_pg_exp_p_filtered <- df_pg_exp_p[which(!is.na(df_pg_exp_p$p_PostHoc_pairs)),] 


```

## Result

The following table shows the proteins with anova pvalue < 0.05 

 **Table shows `r dim(df_pg_exp_p_filtered)[1]` features which has/have at least one pvalue between any two experimental condidtions**


The first column shows the pvalue from the corresponding two groups.


```{r}
datatable(as.matrix(df_pg_exp_p_filtered))
#write.table(df_pg_exp_p, "proteinGroups_ttest.txt", sep = "\t",  quote = FALSE,col.names = NA, row.names =  TRUE)
```


# tTest between `r groups_VS[1]` and `r groups_VS[2]`


**The ttest and fold change are caclulated from the raw intensity, not the log10 value**

```{r}

matrix_fold_change<-function(data,group_info,group_name1,group_name2) {
  group1<-which(group_info==group_name1)
  group2<-which(group_info==group_name2)

  fold_change<-apply(data,1,function(x) sum(x[group1])/sum(x[group2]))
  
  return(fold_change)
}

# calculate the statistics
fold_change <- matrix_fold_change(df_pg_exp,meta$Experiment_group,groups_VS[1],groups_VS[2])

p <- matrix_ttest(df_pg_exp,meta$Experiment_group,groups_VS[1],groups_VS[2])
p_adjusted <- p.adjust(p,method = "fdr")


# combine all p value and selected columns together
df_pg_exp_ttest <- cbind(fold_change,p,p_adjusted,df_pg_exp_GSEA[,c(which(meta$Experiment_group==groups_VS[1]), which(meta$Experiment_group==groups_VS[2]))])

row.names(df_pg_exp_ttest) <- as.data.frame(df_pg_ID_exp_GSEA)[,1]


# rank the table based on the p value
df_pg_exp_ttest <- df_pg_exp_ttest[order(df_pg_exp_ttest$p_adjusted),]

df_pg_exp_ttest_p_05 <- df_pg_exp_ttest[df_pg_exp_ttest$p < 0.05,]


```



**There are `r length(which(p <0.05))` protein/features with p < 0.05 between `r groups_VS[1]` and `r groups_VS[2]`**


**There are `r length(which(p_adjusted <0.05))` with p_adjusted < 0.05 after FDR correction.**



**The table shows proteins with p<0.05, not p_adjust, which is too stringent for this dataset**

```{r}



datatable(df_pg_exp_ttest_p_05)

#df_pg_exp_p_CK_PCK <- cbind(fold_change_CK_PCK,p_CK_PCK_adjusted,df_pg_exp_GSEA)
#significant_CK_PCK <- df_pg_exp_p_CK_PCK[p_CK_PCK_adjusted < 0.05 ,]
#datatable(df_pg_exp_p_CK_PCK)
```



==========================================================================================================


# Functional analysis 


A common approach in analyzing gene expression profiles was identifying differential expressed genes that are deemed interesting. This approach will find genes where the difference is large, but it will not detect a situation where the difference is small, but evidenced in coordinated way in a set of related genes. Gene Set Enrichment Analysis (GSEA)(Subramanian et al. 2005) directly addresses this limitation. All genes can be used in GSEA; GSEA aggregates the per gene statistics across genes within a gene set, therefore making it possible to detect situations where all genes in a predefined set change in a small but coordinated way. Since it is likely that many relevant phenotypic differences are manifested by small but consistent changes in a set of genes.


Frequently used functional analysis is based on the annotation. The principle is to check if the target gene list is more likely to fall in a specific gene set. This gene set is a group of genes sharing a specific biological term. This term could mean that they are involved in a specific pathway(KEGG), or biolgoical process (GOBP), melocularfuctioi(GOMF), or they co-localize  in the same part of the cell (GOCC) or chromsome, or they are related to a specific disease etc. 

The most popular way is to calcluate the pvalue based on hypergeometrical distrubtion, or fisher exact test. The other frequently used way is to GSEA, which use the whole geneset ,instead of onlu using "significanlty differential expressed" proteins/genes. GSEA method is more popular in genomic data analysis, and gain more and more attention in proteomics now.


**For the following classical enrichment analysis, feature used are from pvalue <0.05 from ttest between `r groups_VS[1]` and `r groups_VS[2]`**
**FDR corrected pvalue was not used, because it is too stringent for this dataset**

**For the following GSEA analysis, ranked values are fold change between `r groups_VS[1]` and `r groups_VS[2]`**



```{r prepare dataset}

# geneList contains three features:
# 
# numeric vector: fold change or other type of numerical variable
# named vector: every number has a name, the corresponding gene ID
# sorted vector: number should be sorted in decreasing order
# If you import your data from a csv file, the file should contains two columns, one for gene ID (no duplicated ID allowed) and another one for fold change
# 
# https://github.com/GuangchuangYu/DOSE/wiki/how-to-prepare-your-own-geneList

# df_pg_exp_p

# using entrezid is the most popular gene id for the analysis, while Uniprot can also work for most analysis, not all
# the gene id list are used forn classical enrichment analysis
# the preranked vector, with gene id names for gsea type of analysis

# choose the right value for to do the GSEA, has to be decreasing order 

reference_value <- fold_change  # use the fold change of 
names(reference_value) <- df_pg_ID_exp_GSEA$ID

reference_value_ranked  <- sort(reference_value, decreasing = TRUE) # for gsea test
reference_value_filtered  <- reference_value_ranked[reference_value_ranked >1] #filtered value


# for classical erichment analysis
reference_genes <- row.names(df_pg_exp_ttest_p_05) 
reference_genes_all <- df_pg_ID_exp_GSEA$ID


#  setup the parameter for the enrichment analysis


#human: "org.Hs.eg.db" ; mouse:"org.Mm.eg.db", bovine/cow "org.Bt.eg.db"
OrgDb         <- "org.Bt.eg.db"
keyType       <- "UNIPROT"

# human: "hsa"; mouse: "mmu"
# https://www.genome.jp/kegg/catalog/org_list.html   for full list

OrgDb_kegg <- "bta" # cow
keyType_kegg <-"uniprot"

# human: "human", mouse: "mouse"
organism_pathway <- "bovine" # or cow?

```


======================================================================================================================

## GO enrichment 

### GOCC against whole genome


```{r GO_analysis}
p.adjust_cutoff <- 0.01

#reference_genes

# GO enichment analysis/ over reprentative analysis
result_enrichGO_CC <- enrichGO(gene          = reference_genes,
                              keyType       = keyType,
                              #universe      = names(geneList),
                              OrgDb         = OrgDb,
                              ont           = "CC",
                              pAdjustMethod = "BH",
                              pvalueCutoff  = p.adjust_cutoff,
                              qvalueCutoff  = 0.05,
                              readable      = TRUE)

```

```{r}
# take over the over-reprentation /enrichment result
result_enrichment <- result_enrichGO_CC

# convert the entrezid to gene name for better visualization 
result_enrichment <- setReadable(result_enrichment, OrgDb, keyType)
```



#### summary

pvalueCutoff:  `r result_enrichment@pvalueCutoff`

pAdjustMethod: `r result_enrichment@pAdjustMethod`

qvalueCutoff: `r result_enrichment@qvalueCutoff`

organism: `r result_enrichment@organism`

ontology: `r result_enrichment@ontology`


The pvalue-adjusted from this enrichment analysis is:  `r range(result_enrichment@result$p.adjust)[1] ` to `r range(result_enrichment@result$p.adjust)[2]`

> The pvalue cutoff for enrichment analysis is set to `r p.adjust_cutoff`




#### data table

```{r}
if(!is.null(result_enrichment)){
datatable(result_enrichment@result)
}

```


#### bar plot

```{r fig.width= 15, fig.height= 6}
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  barplot(result_enrichment)
}
}


```

#### dot plot

```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  enrichplot::dotplot(result_enrichment)
}
}
```


#### enrichment map plot

```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  emapplot(result_enrichment)
}
}
```

#### enrichment network plot

```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  cnetplot(result_enrichment,categorySize="pvalue", foldChange=reference_value_ranked)
}
}
```



#### Correlation plot

Alternative ways for visualizing the complex association between genes and gene sets. It emphasizes the gene overlapping among different gene sets.

```{r fig.width= 15,fig.height=6}
if(!is.null(result_enrichment)){
if(sum(result_enrichment@result$p.adjust < p.adjust_cutoff)>1){
  upsetplot(result_enrichment)
  heatplot(result_enrichment,foldChange=reference_value_ranked)
}
}

```



### GOCC against whole identified genelist 

```{r GO_analysis_local}
p.adjust_cutoff <- 0.5
# GO enichment analysis/ over reprentative analysis
result_enrichGO_CC_local <- enrichGO(gene          = reference_genes,
                              keyType       = keyType,
                              universe      = reference_genes_all,
                              OrgDb         = OrgDb,
                              ont           = "CC",
                              pAdjustMethod = "BH",
                              pvalueCutoff  = p.adjust_cutoff,
                              qvalueCutoff  = 0.5,
                              readable      = TRUE)


```

```{r}
# take over the over-reprentation /enrichment result
result_enrichment <- result_enrichGO_CC_local

# convert the entrezid to gene name for better visualization 
result_enrichment <- setReadable(result_enrichment, OrgDb, keyType)
```



#### summary

pvalueCutoff:  `r result_enrichment@pvalueCutoff`

pAdjustMethod: `r result_enrichment@pAdjustMethod`

qvalueCutoff: `r result_enrichment@qvalueCutoff`

organism: `r result_enrichment@organism`

ontology: `r result_enrichment@ontology`


The pvalue-adjusted from this enrichment analysis is:  `r range(result_enrichment@result$p.adjust)[1] ` to `r range(result_enrichment@result$p.adjust)[2]`

> The pvalue cutoff for enrichment analysis is set to `r p.adjust_cutoff`

#### data table

```{r}

if(!is.null(result_enrichment)){
datatable(result_enrichment@result)
}

```
#### bar plot

```{r fig.width= 15, fig.height= 6}
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  barplot(result_enrichment)
}
}


```

#### dot plot

```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  enrichplot::dotplot(result_enrichment)
}
}

```


#### enrichment map plot
```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  emapplot(result_enrichment)
}
}


```

#### enrichment network plot
```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  cnetplot(result_enrichment,categorySize="pvalue", foldChange=reference_value_ranked)
}
}

```



#### Correlation plot

Alternative ways for visualizing the complex association between genes and gene sets. It emphasizes the gene overlapping among different gene sets.

```{r fig.width= 15,fig.height=6}
if(!is.null(result_enrichment)){
if(sum(result_enrichment@result$p.adjust < p.adjust_cutoff)>1){
  upsetplot(result_enrichment)
  heatplot(result_enrichment,foldChange=reference_value_ranked)
}
}

```




### GOBP against whole genome


```{r GO_BP_analysis}
p.adjust_cutoff <- 0.01
# GO enichment analysis/ over reprentative analysis
result_enrichGO_BP <- enrichGO(gene          = reference_genes,
                              keyType       = keyType,
                              #universe      = names(geneList),
                              OrgDb         = OrgDb,
                              ont           = "BP",
                              pAdjustMethod = "BH",
                              pvalueCutoff  = p.adjust_cutoff,
                              qvalueCutoff  = 0.05,
                              readable      = TRUE)


```


```{r}
# take over the over-reprentation /enrichment result
result_enrichment <- result_enrichGO_BP

# convert the entrezid to gene name for better visualization 
result_enrichment <- setReadable(result_enrichment, OrgDb, keyType)
```



#### summary

pvalueCutoff:  `r result_enrichment@pvalueCutoff`

pAdjustMethod: `r result_enrichment@pAdjustMethod`

qvalueCutoff: `r result_enrichment@qvalueCutoff`

organism: `r result_enrichment@organism`

ontology: `r result_enrichment@ontology`


The pvalue-adjusted from this enrichment analysis is:  `r range(result_enrichment@result$p.adjust)[1] ` to `r range(result_enrichment@result$p.adjust)[2]`

> The pvalue cutoff for enrichment analysis is set to `r p.adjust_cutoff`

#### data table

```{r}
if(! is.null(result_enrichment)){
datatable(result_enrichment@result)
}

```
#### bar plot

```{r fig.width= 15, fig.height= 6}
if(! is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  barplot(result_enrichment)
}
}


```

#### dot plot

```{r fig.width= 15, fig.height= 6} 
if(! is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  enrichplot::dotplot(result_enrichment)
}
}
```


#### enrichment map plot
```{r fig.width= 15, fig.height= 6} 
if(! is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  emapplot(result_enrichment)
}
}
```

#### enrichment network plot
```{r fig.width= 15, fig.height= 6} 
if(! is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  cnetplot(result_enrichment,categorySize="pvalue", foldChange=reference_value_ranked)
}
}
```



#### Correlation plot

Alternative ways for visualizing the complex association between genes and gene sets. It emphasizes the gene overlapping among different gene sets.

```{r fig.width= 15,fig.height=6}
if(! is.null(result_enrichment)){
if(sum(result_enrichment@result$p.adjust < p.adjust_cutoff)>1){
  upsetplot(result_enrichment)
  heatplot(result_enrichment,foldChange=reference_value_ranked)
}
}

```



### GOBP against whole identified genelist

```{r GO_BP_analysis_local}
p.adjust_cutoff <- 0.5
# GO enichment analysis/ over reprentative analysis
result_enrichGO_BP_local <- enrichGO(gene          = reference_genes,
                              keyType       = keyType,
                              universe      = reference_genes_all,
                              OrgDb         = OrgDb,
                              ont           = "CC",
                              pAdjustMethod = "BH",
                              pvalueCutoff  = p.adjust_cutoff,
                              qvalueCutoff  = 0.55,
                              readable      = TRUE)

```


```{r}
# take over the over-reprentation /enrichment result
result_enrichment <- result_enrichGO_BP_local

# convert the entrezid to gene name for better visualization 
result_enrichment <- setReadable(result_enrichment, OrgDb, keyType)
```


#### summary

pvalueCutoff:  `r result_enrichment@pvalueCutoff`

pAdjustMethod: `r result_enrichment@pAdjustMethod`

qvalueCutoff: `r result_enrichment@qvalueCutoff`

organism: `r result_enrichment@organism`

ontology: `r result_enrichment@ontology`


The pvalue-adjusted from this enrichment analysis is:  `r range(result_enrichment@result$p.adjust)[1] ` to `r range(result_enrichment@result$p.adjust)[2]`

> The pvalue cutoff for enrichment analysis is set to `r p.adjust_cutoff`


#### data table

```{r}
if(!is.null(result_enrichment)){
datatable(result_enrichment@result)
}

```
#### bar plot

```{r fig.width= 15, fig.height= 6}
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  barplot(result_enrichment)
}
}

```

#### dot plot

```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  enrichplot::dotplot(result_enrichment)
}
}
```


#### enrichment map plot
```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  emapplot(result_enrichment)
}
}
```

#### enrichment network plot
```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  cnetplot(result_enrichment,categorySize="pvalue", foldChange=reference_value_ranked)
}
}
```



#### Correlation plot

Alternative ways for visualizing the complex association between genes and gene sets. It emphasizes the gene overlapping among different gene sets.

```{r fig.width= 15,fig.height=6}
if(!is.null(result_enrichment)){
if(sum(result_enrichment@result$p.adjust < p.adjust_cutoff)>1){
  upsetplot(result_enrichment)
  heatplot(result_enrichment,foldChange=reference_value_ranked)
}
}
```



### GOMF against whole genome


```{r GO_MF_analysis}
p.adjust_cutoff <- 0.01
# GO enichment analysis/ over reprentative analysis
result_enrichGO_MF <- enrichGO(gene          = reference_genes,
                              keyType       = keyType,
                              #universe      = names(geneList),
                              OrgDb         = OrgDb,
                              ont           = "MF",
                              pAdjustMethod = "BH",
                              pvalueCutoff  = p.adjust_cutoff,
                              qvalueCutoff  = 0.05,
                              readable      = TRUE)

```


```{r}
# take over the over-reprentation /enrichment result
result_enrichment <- result_enrichGO_MF

# convert the entrezid to gene name for better visualization 
result_enrichment <- setReadable(result_enrichment,OrgDb,keyType)
```



#### summary

pvalueCutoff:  `r result_enrichment@pvalueCutoff`

pAdjustMethod: `r result_enrichment@pAdjustMethod`

qvalueCutoff: `r result_enrichment@qvalueCutoff`

organism: `r result_enrichment@organism`

ontology: `r result_enrichment@ontology`


The pvalue-adjusted from this enrichment analysis is:  `r range(result_enrichment@result$p.adjust)[1] ` to `r range(result_enrichment@result$p.adjust)[2]`

> The pvalue cutoff for enrichment analysis is set to `r p.adjust_cutoff`


#### data table

```{r}
if(!is.null(result_enrichment)){
datatable(result_enrichment@result)
}

```
#### bar plot

```{r fig.width= 15, fig.height= 6}
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  barplot(result_enrichment)
}
}

```

#### dot plot

```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  enrichplot::dotplot(result_enrichment)
}
}
```


#### enrichment map plot
```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  emapplot(result_enrichment)
}
}
```

#### enrichment network plot
```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  cnetplot(result_enrichment,categorySize="pvalue", foldChange=reference_value_ranked)
}
}
```



#### Correlation plot

Alternative ways for visualizing the complex association between genes and gene sets. It emphasizes the gene overlapping among different gene sets.

```{r fig.width= 15,fig.height=6}
if(!is.null(result_enrichment)){
if(sum(result_enrichment@result$p.adjust < p.adjust_cutoff)>1){
  upsetplot(result_enrichment)
  heatplot(result_enrichment,foldChange=reference_value_ranked)
}
}

```



### GOMF against whole identified genelist

```{r GO_MF_analysis_local}
p.adjust_cutoff <- 0.5
# GO enichment analysis/ over reprentative analysis
result_enrichGO_MF_local <- enrichGO(gene          = reference_genes,
                              keyType       = keyType,
                              universe      = reference_genes_all,
                              OrgDb         = OrgDb,
                              ont           = "CC",
                              pAdjustMethod = "BH",
                              pvalueCutoff  = p.adjust_cutoff,
                              qvalueCutoff  = 0.5,
                              readable      = TRUE)

```


```{r}
# take over the over-reprentation /enrichment result
result_enrichment <- result_enrichGO_MF_local

# convert the entrezid to gene name for better visualization 
result_enrichment <- setReadable(result_enrichment, OrgDb, keyType)
```



#### summary

pvalueCutoff:  `r result_enrichment@pvalueCutoff`

pAdjustMethod: `r result_enrichment@pAdjustMethod`

qvalueCutoff: `r result_enrichment@qvalueCutoff`

organism: `r result_enrichment@organism`

ontology: `r result_enrichment@ontology`


The pvalue-adjusted from this enrichment analysis is:  `r range(result_enrichment@result$p.adjust)[1] ` to `r range(result_enrichment@result$p.adjust)[2]`

> The pvalue cutoff for enrichment analysis is set to `r p.adjust_cutoff`


#### data table

```{r}
if(!is.null(result_enrichment)){
datatable(result_enrichment@result)
}

```
#### bar plot

```{r fig.width= 15, fig.height= 6}
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  barplot(result_enrichment)
}
}

```

#### dot plot

```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  enrichplot::dotplot(result_enrichment)
}
}
```


#### enrichment map plot
```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  emapplot(result_enrichment)
}
}
```

#### enrichment network plot
```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  cnetplot(result_enrichment,categorySize="pvalue", foldChange=reference_value_ranked)
}
}
```



#### Correlation plot

Alternative ways for visualizing the complex association between genes and gene sets. It emphasizes the gene overlapping among different gene sets.

```{r fig.width= 15,fig.height=6}
if(!is.null(result_enrichment)){
if(sum(result_enrichment@result$p.adjust < p.adjust_cutoff)>1){
  upsetplot(result_enrichment)
  heatplot(result_enrichment,foldChange=reference_value_ranked)
}
}

```





## GO GSEA

### GO GSEA CC

```{r}
p.adjust_cutoff <- 0.5
result_GO_GSEA_CC <- gseGO(geneList     = reference_value_ranked,
              OrgDb        = OrgDb,
              keyType      = keyType,
              ont          = "CC",
              nPerm        = 1000,
              minGSSize    = 5,
              maxGSSize    = 500,
              pvalueCutoff = p.adjust_cutoff,
              verbose      = TRUE)

```

> The pvalue cutoff for GSEA analysis is set to `r p.adjust_cutoff` 


```{r}
# take over the analysis result

result_GSEA <- result_GO_GSEA_CC
# convert the entrezid to gene name for better visualization 

result_GSEA <- setReadable(result_GSEA, OrgDb, keyType)

```

#### data table

```{r}
if(!is.null(result_GSEA)){
datatable(result_GSEA@result)
}
```


#### dot plot

```{r fig.width= 15,fig.height=6}
if(!is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
  enrichplot::dotplot(result_GSEA)
}
}  
```

#### map plot

```{r fig.width= 10,fig.height=6}
if(!is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
    emapplot(result_GSEA)
}
}

```

#### networkplot

```{r fig.width= 15,fig.height=10}
if(!is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
   cnetplot(result_GSEA,categorySize="pvalue", foldChange=reference_value_ranked, colorEdge = TRUE, circular = FALSE)

}
}
 
```


#### Correlation plot

Alternative ways for visualizing the complex association between genes and gene sets. It emphasizes the gene overlapping among different gene sets.

```{r fig.width= 15,fig.height=6}
if(!is.null(result_GSEA)){
if(sum(result_GSEA@result$p.adjust < p.adjust_cutoff)>1){
  heatplot(result_GSEA,foldChange=reference_value_ranked)
}
}
```


#### Top N GSEA enriched overlay plot

for more information about how to interpret this figure , refer to [this link](http://software.broadinstitute.org/gsea/doc/GSEAUserGuideFrame.html)


```{r fig.width= 10, fig.height=8}
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff) && dim(result_GSEA@result)[1] >=5 ){
  gseaplot2(result_GSEA, geneSetID =  1:5, title = "Top5 GSEA Enriched", pvalue_table = TRUE)
}else if (any(result_GSEA@result$p.adjust < p.adjust_cutoff) && dim(result_GSEA@result)[1] < 5 ){
  gseaplot2(result_GSEA, geneSetID =  1:dim(result_GSEA@result)[1], title = "Top GSEA Enriched", pvalue_table = TRUE)
}

```



### GO GSEA BP

```{r}
# set p.adjust cutoff
p.adjust_cutoff <- 0.5

result_GO_GSEA_BP <- gseGO(geneList     = reference_value_ranked,
              OrgDb        = OrgDb,
              keyType      = keyType,
              ont          = "BP",
              nPerm        = 1000,
              minGSSize    = 5,
              maxGSSize    = 500,
              pvalueCutoff = p.adjust_cutoff,
              verbose      = TRUE)

```

> The pvalue cutoff for GSEA analysis is set to `r p.adjust_cutoff` 

```{r}
# take over the analysis result

result_GSEA <- result_GO_GSEA_BP
# convert the entrezid to gene name for better visualization 

result_GSEA <- setReadable(result_GSEA, OrgDb, keyType)

```


#### data table

```{r}
if(!is.null(result_GSEA)){
datatable(result_GSEA@result)
}
```


#### dot plot

```{r fig.width= 15,fig.height=6}
if(!is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
  enrichplot::dotplot(result_GSEA)
}
}
  
```

#### map plot

```{r fig.width= 10,fig.height=6}
if(!is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
    emapplot(result_GSEA)
}
}

```

#### networkplot

```{r fig.width= 15,fig.height=10}
if(!is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
   cnetplot(result_GSEA,categorySize="pvalue", foldChange=reference_value_ranked, colorEdge = TRUE, circular = FALSE)

}
}
 
```


#### Correlation plot

Alternative ways for visualizing the complex association between genes and gene sets. It emphasizes the gene overlapping among different gene sets.

```{r fig.width= 15,fig.height=6}
if(!is.null(result_GSEA)){
if(sum(result_GSEA@result$p.adjust < p.adjust_cutoff)>1){
  heatplot(result_GSEA,foldChange=reference_value_ranked)
}
}
```


#### Top N GSEA enriched overlay plot

for more information about how to interpret this figure , refer to [this link](http://software.broadinstitute.org/gsea/doc/GSEAUserGuideFrame.html)


```{r fig.width= 10, fig.height=8}
if(!is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff) && dim(result_GSEA@result)[1] >=5 ){
  gseaplot2(result_GSEA, geneSetID =  1:5, title = "Top5 GSEA Enriched", pvalue_table = TRUE)
}else if (any(result_GSEA@result$p.adjust < p.adjust_cutoff) && dim(result_GSEA@result)[1] < 5 ){
  gseaplot2(result_GSEA, geneSetID =  1:dim(result_GSEA@result)[1], title = "Top GSEA Enriched", pvalue_table = TRUE)
}
}

```




### GO GSEA MF

```{r}
# set p.adjust cutoff
p.adjust_cutoff <- 0.5

result_GO_GSEA_MF <- gseGO(geneList     = reference_value_ranked,
              OrgDb        = OrgDb,
              keyType      = keyType,
              ont          = "MF",
              nPerm        = 1000,
              minGSSize    = 5,
              maxGSSize    = 500,
              pvalueCutoff = p.adjust_cutoff,
              verbose      = TRUE)
```

> The pvalue cutoff for GSEA analysis is set to `r p.adjust_cutoff` 

```{r}
# take over the analysis result

result_GSEA <- result_GO_GSEA_MF
# convert the entrezid to gene name for better visualization 

result_GSEA <- setReadable(result_GSEA, OrgDb, keyType)

```


#### data table

```{r}
if(!is.null(result_GSEA)){
datatable(result_GSEA@result)
}
```


#### dot plot

```{r fig.width= 15,fig.height=6}
if(!is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
  enrichplot::dotplot(result_GSEA)
}
}
  
```

#### map plot

```{r fig.width= 10,fig.height=6}
if(!is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
    emapplot(result_GSEA)
}
}


```

#### networkplot

```{r fig.width= 15,fig.height=10}
if(!is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
   cnetplot(result_GSEA,categorySize="pvalue", foldChange=reference_value_ranked, colorEdge = TRUE, circular = FALSE)

}
}
 
```


#### Correlation plot

Alternative ways for visualizing the complex association between genes and gene sets. It emphasizes the gene overlapping among different gene sets.

```{r fig.width= 15,fig.height=6}
if(!is.null(result_GSEA)){
if(sum(result_GSEA@result$p.adjust < p.adjust_cutoff)>1){
  heatplot(result_GSEA,foldChange=reference_value_ranked)
}
}

```


#### Top N GSEA enriched overlay plot

for more information about how to interpret this figure , refer to [this link](http://software.broadinstitute.org/gsea/doc/GSEAUserGuideFrame.html)


```{r fig.width= 10, fig.height=8}
if(!is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff) && dim(result_GSEA@result)[1] >=5 ){
  gseaplot2(result_GSEA, geneSetID =  1:5, title = "Top5 GSEA Enriched", pvalue_table = TRUE)
}else if (any(result_GSEA@result$p.adjust < p.adjust_cutoff) && dim(result_GSEA@result)[1] < 5 ){
  gseaplot2(result_GSEA, geneSetID =  1:dim(result_GSEA@result)[1], title = "Top GSEA Enriched", pvalue_table = TRUE)
}
}

```



======================================================================================================================

## KEGG analysis

### enrichment analysis

```{r KEGG enrichment }
### KEGG enrichment
p.adjust_cutoff <- 0.5
result_KEGG_enrich <- enrichKEGG(gene    = reference_genes,
                 organism     = OrgDb_kegg,
                 keyType      = keyType_kegg,#note that in KEGG, for eukaryote, . The data source of KEGG was from NCBI. A rule of thumb for the 'kegg' ID is entrezgene ID for eukaryote species and Locus ID for prokaryotes
                 pvalueCutoff = p.adjust_cutoff)

```


```{r}
# take over the over-reprentation /enrichment result
result_enrichment <- result_KEGG_enrich

# convert the entrezid to gene name for better visualization 
result_enrichment <- setReadable(result_enrichment, OrgDb, keyType)
```



#### summary

pvalueCutoff:  `r result_enrichment@pvalueCutoff`

pAdjustMethod: `r result_enrichment@pAdjustMethod`

qvalueCutoff: `r result_enrichment@qvalueCutoff`

organism: `r result_enrichment@organism`

ontology: `r result_enrichment@ontology`


The pvalue-adjusted from this enrichment analysis is:  `r range(result_enrichment@result$p.adjust)[1] ` to `r range(result_enrichment@result$p.adjust)[2]`

> The pvalue cutoff for enrichment analysis is set to `r p.adjust_cutoff`


#### data table

```{r}
datatable(result_enrichment@result)


```
#### bar plot

```{r fig.width= 15, fig.height= 6}

if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  barplot(result_enrichment)
}


```

#### dot plot

```{r fig.width= 15, fig.height= 6} 
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  enrichplot::dotplot(result_enrichment)
}
```


#### enrichment map plot
```{r fig.width= 15, fig.height= 6} 
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  emapplot(result_enrichment)
}
```

#### enrichment network plot
```{r fig.width= 15, fig.height= 6} 
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  cnetplot(result_enrichment,categorySize="pvalue", foldChange=reference_value_ranked)
}
```



#### Correlation plot

Alternative ways for visualizing the complex association between genes and gene sets. It emphasizes the gene overlapping among different gene sets.

```{r fig.width= 15,fig.height=6}
if(sum(result_enrichment@result$p.adjust < p.adjust_cutoff)>1){
  upsetplot(result_enrichment)
  heatplot(result_enrichment,foldChange=reference_value_ranked)
}

```


#### pathway view
```{r eval=FALSE}
pathview(gene.data = reference_value_ranked,
              pathway.id = result_enrichment@result$ID[1],
              species = "hsa",
              limit = list(gene = 2, # value gives the max/min limit for foldchanges
              cpd = 1))
```


###  KEGG geneset analysis


```{r}
# set p.adjust cutoff
p.adjust_cutoff <- 0.5

result_KEGG_gsea <- gseKEGG(geneList     = reference_value_ranked,
               organism     = OrgDb_kegg,
               keyType      = keyType_kegg,
               nPerm        = 1000,
               minGSSize    = 10,
               maxGSSize    = 500,
               pvalueCutoff = p.adjust_cutoff,
               verbose      = TRUE)


```

> The pvalue cutoff for GSEA analysis is set to `r p.adjust_cutoff` 

```{r}
# take over the analysis result

result_GSEA <- result_KEGG_gsea
# convert the entrezid to gene name for better visualization 

result_GSEA <- setReadable(result_GSEA, OrgDb, keyType)

```



#### data table

```{r}
datatable(result_GSEA@result)
```


#### dot plot

```{r fig.width= 15,fig.height=6}
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
  enrichplot::dotplot(result_GSEA)
}
  
```

#### map plot

```{r fig.width= 10,fig.height=6}
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
    emapplot(result_GSEA)
}


```

#### networkplot

```{r fig.width= 15,fig.height=10}
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
   cnetplot(result_GSEA,categorySize="pvalue", foldChange=reference_value_ranked, colorEdge = TRUE, circular = FALSE)

}
 
```


#### Correlation plot

Alternative ways for visualizing the complex association between genes and gene sets. It emphasizes the gene overlapping among different gene sets.

```{r fig.width= 15,fig.height=6}
if(sum(result_GSEA@result$p.adjust < p.adjust_cutoff)>1){
  heatplot(result_GSEA,foldChange=reference_value_ranked)
}

```


#### Top N GSEA enriched overlay plot

for more information about how to interpret this figure , refer to [this link](http://software.broadinstitute.org/gsea/doc/GSEAUserGuideFrame.html)


```{r fig.width= 10, fig.height=8}
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff) && dim(result_GSEA@result)[1] >=5 ){
  gseaplot2(result_GSEA, geneSetID =  1:5, title = "Top5 GSEA Enriched", pvalue_table = TRUE)
}else if (any(result_GSEA@result$p.adjust < p.adjust_cutoff) && dim(result_GSEA@result)[1] < 5 ){
  gseaplot2(result_GSEA, geneSetID =  1:dim(result_GSEA@result)[1], title = "Top GSEA Enriched", pvalue_table = TRUE)
}

```





## KEGG module analysis

 [KEGG Module](https://www.genome.jp/kegg/module.html) is a collection of manually defined function units. called KEGG modules and identified by the M numbers, used for annotation and biological interpretation of sequenced genomes. There are four types of KEGG modules:
 
* pathway modules - representing tight functional units in KEGG metabolic pathway maps, such as M00002 (Glycolysis, core module involving three-carbon compounds)
* structural complexes - often forming molecular machineries, such as M00072 (Oligosaccharyltransferase)
* functional sets - for other types of essential sets, such as M00360 (Aminoacyl-tRNA synthases, prokaryotes)
* signature modules - as markers of phenotypes, such as M00363 (EHEC pathogenicity signature, Shiga toxin)


 In some situation, KEGG Modules have a more straightforward interpretation.



### enrichment analysis

```{r KEGG modele enrich analysis}
p.adjust_cutoff <- 0.5
result_KEGG_module_enrich <- enrichMKEGG(gene = reference_genes,
                                  organism     = OrgDb_kegg,
                                  keyType      = keyType_kegg,
                                  pvalueCutoff = p.adjust_cutoff, 
                                  pAdjustMethod = "BH", 
                                  minGSSize = 10, 
                                  maxGSSize = 500, 
                                  qvalueCutoff = 0.2)

```


```{r}
# take over the over-reprentation /enrichment result
result_enrichment <- result_KEGG_module_enrich

# convert the entrezid to gene name for better visualization 
if(! is.null(result_enrichment)){
  result_enrichment <- setReadable(result_enrichment,  OrgDb, keyType)
}


```



#### data table

```{r}
if(! is.null(result_enrichment)){
  datatable(result_enrichment@result)
}



```
#### bar plot

```{r fig.width= 15, fig.height= 6}

if(! is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  barplot(result_enrichment)
}
}

```

#### dot plot

```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
  if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  enrichplot::dotplot(result_enrichment)
}
}


```


#### enrichment map plot
```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  emapplot(result_enrichment)
}
}
```

#### enrichment network plot
```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  cnetplot(result_enrichment,categorySize="pvalue", foldChange=reference_value_ranked)
}
}
```



#### Correlation plot

Alternative ways for visualizing the complex association between genes and gene sets. It emphasizes the gene overlapping among different gene sets.

```{r fig.width= 15,fig.height=6}
if(!is.null(result_enrichment)){
if(sum(result_enrichment@result$p.adjust < p.adjust_cutoff)>1){
  upsetplot(result_enrichment)
  heatplot(result_enrichment,foldChange=reference_value_ranked)
}
}

```




### KEGG module gsea analysis

```{r}

# set p.adjust cutoff
p.adjust_cutoff <- 0.5

result_KEGG_module_gsea <- gseMKEGG(geneList = reference_value_ranked,
                                    keyType      = keyType_kegg,
                                    nPerm        = 1000,
                                     pvalueCutoff = p.adjust_cutoff,
                                    organism = OrgDb_kegg)


```

> The pvalue cutoff for GSEA analysis is set to `r p.adjust_cutoff` 

```{r}
# take over the analysis result

result_GSEA <- result_KEGG_module_gsea
# convert the entrezid to gene name for better visualization 
if(! is.null(result_GSEA)){
  result_GSEA <- setReadable(result_GSEA,  OrgDb, keyType)
}
```


#### data table

```{r}
if(! is.null(result_GSEA)){
datatable(result_GSEA@result)
}
```


#### dot plot

```{r fig.width= 15,fig.height=6}
if(! is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
  enrichplot::dotplot(result_GSEA)
}
}
  
```

#### map plot

```{r fig.width= 10,fig.height=6}
if(! is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
    emapplot(result_GSEA)
}
}


```

#### networkplot

```{r fig.width= 15,fig.height=10}
if(! is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
   cnetplot(result_GSEA,categorySize="pvalue", foldChange=reference_value_ranked, colorEdge = TRUE, circular = FALSE)

}
}
 
```


#### Correlation plot

Alternative ways for visualizing the complex association between genes and gene sets. It emphasizes the gene overlapping among different gene sets.

```{r fig.width= 15,fig.height=6}
if(! is.null(result_GSEA)){
if(sum(result_GSEA@result$p.adjust < p.adjust_cutoff)>1){
  heatplot(result_GSEA,foldChange=reference_value_ranked)
}
}

```


#### Top N GSEA enriched overlay plot

for more information about how to interpret this figure , refer to [this link](http://software.broadinstitute.org/gsea/doc/GSEAUserGuideFrame.html)


```{r fig.width= 10, fig.height=8}
if(! is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff) && dim(result_GSEA@result)[1] >=5 ){
  gseaplot2(result_GSEA, geneSetID =  1:5, title = "Top5 GSEA Enriched", pvalue_table = TRUE)
}else if (any(result_GSEA@result$p.adjust < p.adjust_cutoff) && dim(result_GSEA@result)[1] < 5 ){
  gseaplot2(result_GSEA, geneSetID =  1:dim(result_GSEA@result)[1], title = "Top GSEA Enriched", pvalue_table = TRUE)
}
}
```



======================================================================================================================




## Pathway analysis


### enrichment analysis
```{r}

# reactome pathway analysis
# https://bioconductor.org/packages/release/bioc/vignettes/ReactomePA/inst/doc/ReactomePA.html

# pathway analysis has to use ENTREZID as inpute ids, therefore do the id converstion first
# bitr will produce produce some one2more mapping, we will keep all the matching values

ENTREZID <- bitr(names(reference_value_ranked), fromType="UNIPROT", toType="ENTREZID", OrgDb=OrgDb)


# these are for the gsea analysis
reference_value_ranked_ENTREZID <- reference_value_ranked[match(ENTREZID$UNIPROT,names(reference_value_ranked))]

names(reference_value_ranked_ENTREZID) <- ENTREZID$ENTREZID



p.adjust_cutoff <- 0.5

result_pathway_enrich <- ReactomePA::enrichPathway(
                           gene = ENTREZID$ENTREZID,
                           organism = organism_pathway, 
                           pvalueCutoff = p.adjust_cutoff,
                           pAdjustMethod = "BH",
                           qvalueCutoff = 0.2, 
                           minGSSize = 10,
                           maxGSSize = 500,
                           readable=TRUE)

```


```{r}
# take over the over-reprentation /enrichment result
result_enrichment <- result_pathway_enrich

# convert the entrezid to gene name for better visualization 
result_enrichment <- setReadable(result_enrichment,  OrgDb, keyType)
```



#### data table

```{r}
if(!is.null(result_enrichment)){
datatable(result_enrichment@result)
}

```
#### bar plot

```{r fig.width= 15, fig.height= 6}
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  barplot(result_enrichment)
}
}


```

#### dot plot

```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  enrichplot::dotplot(result_enrichment)
}
}
```


#### enrichment map plot
```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  emapplot(result_enrichment)
}
}
```

#### enrichment network plot
```{r fig.width= 15, fig.height= 6} 
if(!is.null(result_enrichment)){
if(any(result_enrichment@result$p.adjust < p.adjust_cutoff)){
  cnetplot(result_enrichment,categorySize="pvalue", foldChange=reference_value_ranked)
}
}
```



#### Correlation plot

Alternative ways for visualizing the complex association between genes and gene sets. It emphasizes the gene overlapping among different gene sets.

```{r fig.width= 15,fig.height=6}
if(!is.null(result_enrichment)){
if(sum(result_enrichment@result$p.adjust < p.adjust_cutoff)>1){
  upsetplot(result_enrichment)
  heatplot(result_enrichment,foldChange=reference_value_ranked)
}
}
```



### GSEA analysis

```{r}
p.adjust_cutoff <- 1

result_gseaPathway <- gsePathway(reference_value_ranked_ENTREZID,
                                 organism = organism_pathway, 
                                 exponent = 1, 
                                 nPerm = 1000,
                                 minGSSize = 10, 
                                 maxGSSize = 500, 
                                 pvalueCutoff = p.adjust_cutoff,
                                 pAdjustMethod = "BH", 
                                 verbose = TRUE, 
                                 seed = FALSE)



```

> The pvalue cutoff for GSEA analysis is set to `r p.adjust_cutoff` 



```{r}
# take over the analysis result
result_GSEA <- result_gseaPathway
# convert the entrezid to gene name for better visualization 
result_GSEA <- setReadable(result_GSEA,  OrgDb, "ENTREZID")

```

#### data table

```{r}
if(!is.null(result_GSEA)){
datatable(result_GSEA@result)
}
```


#### dot plot

```{r fig.width= 15,fig.height=6}
if(!is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
  enrichplot::dotplot(result_GSEA)
}
}
  
```

#### map plot

```{r fig.width= 10,fig.height=6}
if(!is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
    emapplot(result_GSEA)
}
}


```

#### networkplot

```{r fig.width= 15,fig.height=10}
if(!is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff)){
   cnetplot(result_GSEA,categorySize="pvalue", foldChange=reference_value_ranked, colorEdge = TRUE, circular = FALSE)
}
}
 
```


#### Correlation plot

Alternative ways for visualizing the complex association between genes and gene sets. It emphasizes the gene overlapping among different gene sets.

```{r fig.width= 15,fig.height=6}
if(!is.null(result_GSEA)){
if(sum(result_GSEA@result$p.adjust < p.adjust_cutoff)>1){
  heatplot(result_GSEA,foldChange=reference_value_ranked)
}
}

```


#### Top N GSEA enriched overlay plot

for more information about how to interpret this figure , refer to [this link](http://software.broadinstitute.org/gsea/doc/GSEAUserGuideFrame.html)


```{r fig.width= 10, fig.height=8}
if(!is.null(result_GSEA)){
if(any(result_GSEA@result$p.adjust < p.adjust_cutoff) && dim(result_GSEA@result)[1] >=5 ){
  gseaplot2(result_GSEA, geneSetID =  1:5, title = "Top5 GSEA Enriched", pvalue_table = TRUE)
}else if (any(result_GSEA@result$p.adjust < p.adjust_cutoff) && dim(result_GSEA@result)[1] < 5 ){
  gseaplot2(result_GSEA, geneSetID =  1:dim(result_GSEA@result)[1], title = "Top GSEA Enriched", pvalue_table = TRUE)
}
}

```


