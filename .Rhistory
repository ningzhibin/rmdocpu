proteinGroups <- proteinGroups[-index_to_remove,] # filtered table
protein_primary_ids <- protein_primary_ids[-index_to_remove] # filtered ids
n_contaminant <- length(index_contaminant)
n_reversed <- length(index_reverse)
# extra the intensity column matrix
if(any(grepl("LFQ intensity ", colnames(proteinGroups)))){ # if there are LFQ intensity columns, take out the LFQ columns
intensity_columns <- proteinGroups[,grep("LFQ intensity ", colnames(proteinGroups))]
colnames(intensity_columns)<-gsub("LFQ intensity ", "", colnames(intensity_columns))
}else if(any(grepl("Intensity ", colnames(proteinGroups)))) { # otherwise take out intensity column
intensity_columns <-   proteinGroups[,grep("Intensity ", colnames(proteinGroups))]
colnames(intensity_columns)<-gsub("Intensity ", "", colnames(intensity_columns))
}else{ # this is for the special case that no experiment desgin setup, only one column of intensity
intensity_columns <-   proteinGroups[,grep("Intensity", colnames(proteinGroups)),drop =  FALSE]
}
return(list("intensity_matrix" = intensity_columns,
"n_contaminant" = n_contaminant,
"n_reversed" = n_reversed,
"n_unique_peptides" = proteinGroups$"Unique peptides",
"score" = proteinGroups$Score,
"protein_primary_ids" =protein_primary_ids
))
}
# tidy
proteingroups_tidyed <- tidy_proteingroups(proteinGroups.txt)
proteingroups_tidyed$intensity_matrix
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(proteinGroups$"Protein IDs"), ";") # this is a list of list of split names
proteinGroups <- proteinGroups.txt
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(proteinGroups$"Protein IDs"), ";") # this is a list of list of split names
protein.ids_split
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
protein_primary_ids
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(proteinGroups$"Protein IDs"), ";|s") # this is a list of list of split names
protein.ids_split
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
protein_primary_ids
protein_primary_ids[1]
protein_primary_ids[2]
proteinGroups$"Protein IDs"[1]
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(proteinGroups$"Protein IDs"), ";|s+") # this is a list of list of split names
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
protein_primary_ids[1]
?strsplit
split("AA;BB", ";")
strsplit("AA;BB", ";")
strsplit("AA;BB", ";|,")
strsplit("AA;BB", ";|s")
strsplit("AA BB", ";|s")
strsplit("AA BB", ";|s+")
strsplit("AA BB", ";| ")
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(proteinGroups$"Protein IDs"), ";| ") # this is a list of list of split names
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
protein_primary_ids
tidy_proteingroups <- function(proteinGroups){
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(proteinGroups$"Protein IDs"), ";| ") # this is a list of list of split names
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
#rownames(proteinGroups) <- protein_primary_ids # rename the rownames of the matrix
# do the row wise filtering
index_contaminant <- grep("\\+", proteinGroups$`Potential contaminant`) # note that + is a special character
index_reverse <- grep("\\+", proteinGroups$Reverse)
index_to_remove <- c(index_contaminant,index_reverse)
proteinGroups <- proteinGroups[-index_to_remove,] # filtered table
protein_primary_ids <- protein_primary_ids[-index_to_remove] # filtered ids
n_contaminant <- length(index_contaminant)
n_reversed <- length(index_reverse)
# extra the intensity column matrix
if(any(grepl("LFQ intensity ", colnames(proteinGroups)))){ # if there are LFQ intensity columns, take out the LFQ columns
intensity_columns <- proteinGroups[,grep("LFQ intensity ", colnames(proteinGroups))]
colnames(intensity_columns)<-gsub("LFQ intensity ", "", colnames(intensity_columns))
}else if(any(grepl("Intensity ", colnames(proteinGroups)))) { # otherwise take out intensity column
intensity_columns <-   proteinGroups[,grep("Intensity ", colnames(proteinGroups))]
colnames(intensity_columns)<-gsub("Intensity ", "", colnames(intensity_columns))
}else{ # this is for the special case that no experiment desgin setup, only one column of intensity
intensity_columns <-   proteinGroups[,grep("Intensity", colnames(proteinGroups)),drop =  FALSE]
}
return(list("intensity_matrix" = intensity_columns,
"n_contaminant" = n_contaminant,
"n_reversed" = n_reversed,
"n_unique_peptides" = proteinGroups$"Unique peptides",
"score" = proteinGroups$Score,
"protein_primary_ids" =protein_primary_ids
))
}
protein.ids_split <- strsplit(as.vector(proteinGroups$"Protein IDs"), ";| ") # this is a list of list of split names
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
# do the row wise filtering
index_contaminant <- grep("\\+", proteinGroups$`Potential contaminant`) # note that + is a special character
index_contaminant
index_reverse
index_to_remove
proteinGroups <- proteinGroups[-index_to_remove,] # filtered table
View()
View(proteinGroups)
n_contaminant <- length(index_contaminant)
n_contaminant
n_reversed
proteinGroups <- proteinGroups.txt
index_to_remove
length(index_to_remove) ==0
length(index_to_remove) >0
# test with local test with local files in the same dir,
proteinGroups.txt <- read.delim("proteinGroups1_simple.txt", header = TRUE,check.names = FALSE, stringsAsFactors = FALSE)
# tidy
proteingroups_tidyed <- tidy_proteingroups(proteinGroups.txt)
# process
df_intensity <- proteingroups_tidyed$intensity_matrix
colnames(df_intensity)
meta_table <- data.frame(rawfiles =  colnames(df_intensity), Experiments = colnames(df_intensity), Grouping = c("GLU"ï¼Œ "FOS", "CYC","GLU", "PBS"))
strsplit(colnames(df_intensity), "_")
strsplit(colnames(df_intensity), "_") ->T
strsplit(colnames(df_intensity), "_") ->t
unlist(lapply(t,x[1]))
unlist(lapply(t,function(x)x[1]))
unlist(lapply(t,function(x)x[1])) ->t
meta_table <- data.frame(rawfiles =  colnames(df_intensity), Experiments = colnames(df_intensity), Grouping =t)
View(meta_table)
write_tsv(meta_table, "proteinGroups1_meta.txt")
source("https://raw.githubusercontent.com/ningzhibin/rmdocpu/master/inst/subfunctions_general.r")
source("https://raw.githubusercontent.com/ningzhibin/rmdocpu/master/inst/subfunctions_general_update.r")
# enviroment setup
knitr::opts_chunk$set(echo = FALSE,warning = FALSE, message = FALSE, cache = FALSE)
library(tidyverse)
library(ggplot2)
library(d3heatmap)
library(plotly)
#library(gplots)
#library(corrplot)
#library(DT) # for interactive data table display
# local usage test and debug
# rmarkdown::render("MQ_report_proteinGroups.Rmd", params = list(input_datatable =  your_readin_tbl))
# or with meta information
# rmarkdown::render("MQ_report_proteinGroups.Rmd", params = list(input_datatable =  your_readin_tbl, meta = your_meta_table))
tidy_proteingroups <- function(proteinGroups){
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(proteinGroups$"Protein IDs"), ";| ") # this is a list of list of split names ; for maxquant result, space( ) for Kai's open-search result
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
#rownames(proteinGroups) <- protein_primary_ids # rename the rownames of the matrix
# do the row wise filtering
index_contaminant <- grep("\\+", proteinGroups$`Potential contaminant`) # note that + is a special character
index_reverse <- grep("\\+", proteinGroups$Reverse)
index_to_remove <- c(index_contaminant,index_reverse)
if(length(index_to_remove) >0){
proteinGroups <- proteinGroups[-index_to_remove,] # filtered table
protein_primary_ids <- protein_primary_ids[-index_to_remove] # filtered ids
}
n_contaminant <- length(index_contaminant)
n_reversed <- length(index_reverse)
# extra the intensity column matrix
if(any(grepl("LFQ intensity ", colnames(proteinGroups)))){ # if there are LFQ intensity columns, take out the LFQ columns
intensity_columns <- proteinGroups[,grep("LFQ intensity ", colnames(proteinGroups))]
colnames(intensity_columns)<-gsub("LFQ intensity ", "", colnames(intensity_columns))
}else if(any(grepl("Intensity ", colnames(proteinGroups)))) { # otherwise take out intensity column
intensity_columns <-   proteinGroups[,grep("Intensity ", colnames(proteinGroups))]
colnames(intensity_columns)<-gsub("Intensity ", "", colnames(intensity_columns))
}else{ # this is for the special case that no experiment desgin setup, only one column of intensity
intensity_columns <-   proteinGroups[,grep("Intensity", colnames(proteinGroups)),drop =  FALSE]
}
return(list("intensity_matrix" = intensity_columns,
"n_contaminant" = n_contaminant,
"n_reversed" = n_reversed,
"n_unique_peptides" = proteinGroups$"Unique peptides",
"score" = proteinGroups$Score,
"protein_primary_ids" =protein_primary_ids
))
}
# test with local test with local files in the same dir,
proteinGroups.txt <- read.delim("proteinGroups1_simple.txt", header = TRUE,check.names = FALSE, stringsAsFactors = FALSE)
# opencpu render from data table by parametrized input
proteinGroups.txt <- params$input_datatable
meta_table <- read.delim("proteinGroups1_meta.txt", header = TRUE, check.names = FALSE, stringsAsFactors = FALSE) # test with meta file
# tidy
proteingroups_tidyed <- tidy_proteingroups(proteinGroups.txt)
# process
df_intensity <- proteingroups_tidyed$intensity_matrix
# tidy
proteingroups_tidyed <- tidy_proteingroups(proteinGroups.txt)
# test with local test with local files in the same dir,
proteinGroups.txt <- read.delim("proteinGroups1_simple.txt", header = TRUE,check.names = FALSE, stringsAsFactors = FALSE)
meta_table <- read.delim("proteinGroups1_meta.txt", header = TRUE, check.names = FALSE, stringsAsFactors = FALSE) # test with meta file
proteinGroups <- proteinGroups.txt
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(proteinGroups$"Protein IDs"), ";| ") # this is a list of list of split names ; for maxquant result, space( ) for Kai's open-search result
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
# do the row wise filtering
index_contaminant <- grep("\\+", proteinGroups$`Potential contaminant`) # note that + is a special character
index_reverse <- grep("\\+", proteinGroups$Reverse)
index_to_remove <- c(index_contaminant,index_reverse)
if(length(index_to_remove) >0){
proteinGroups <- proteinGroups[-index_to_remove,] # filtered table
protein_primary_ids <- protein_primary_ids[-index_to_remove] # filtered ids
}
n_contaminant <- length(index_contaminant)
n_reversed <- length(index_reverse)
# extra the intensity column matrix
if(any(grepl("LFQ intensity ", colnames(proteinGroups)))){ # if there are LFQ intensity columns, take out the LFQ columns
intensity_columns <- proteinGroups[,grep("LFQ intensity ", colnames(proteinGroups))]
colnames(intensity_columns)<-gsub("LFQ intensity ", "", colnames(intensity_columns))
}else if(any(grepl("Intensity ", colnames(proteinGroups)))) { # otherwise take out intensity column
intensity_columns <-   proteinGroups[,grep("Intensity ", colnames(proteinGroups))]
colnames(intensity_columns)<-gsub("Intensity ", "", colnames(intensity_columns))
}else{ # this is for the special case that no experiment desgin setup, only one column of intensity
intensity_columns <-   proteinGroups[,grep("Intensity", colnames(proteinGroups)),drop =  FALSE]
}
intensity_columns
return(list("intensity_matrix" = intensity_columns,
"n_contaminant" = n_contaminant,
"n_reversed" = n_reversed,
"n_unique_peptides" = proteinGroups$"Unique peptides",
"score" = proteinGroups$Score,
"protein_primary_ids" =protein_primary_ids
))
n_contaminant
n_reversed
meta_table <- read.delim("proteinGroups1_meta.txt", header = TRUE, check.names = FALSE, stringsAsFactors = FALSE) # test with meta file
View(meta_table)
# tidy
proteingroups_tidyed <- tidy_proteingroups(proteinGroups.txt)
# process
df_intensity <- proteingroups_tidyed$intensity_matrix
dim(df_intensity)
sparsity <- rowSums(df_intensity > 0) # here sparsity is number of present values
index_all_na_rows <- which(sparsity == 0)
df_intensity <- df_intensity[-index_all_na_rows,,drop = FALSE]
protein_primary_ids <- proteingroups_tidyed$protein_primary_ids[-index_all_na_rows]
if(ncol(df_intensity) > 3){ # otherwise, no point to do PCA
df_intensity_log10 <- log10(df_intensity+1)
if(is.null(meta_table)){
#pca <-PCA_wrapper_prcomp2(data_matrix = as.matrix(df_intensity_log10), inputation = TRUE)
PCA_result <- prcomp(t(df_intensity_log10))
loading <- as.data.frame(PCA_result$x)
#plot(loading$PC1, loading$PC2)
#plot_ly(data = loading, x = ~PC1, y = ~PC2) %>% add_markers() %>% add_text(text = row.names(loading))
p1 <- plot_ly(loading, x = ~PC1, y = ~PC2, z = ~PC3) %>%
add_markers() %>%
add_text(text = row.names(loading))
# for screen plot
sd <- PCA_result$sde
var <- sd^2
var.percent <- var/sum(var) * 100
PCs <- paste("PC", 1:length(var.percent))
df_scree <- data.frame(PC  = factor(PCs, levels = PCs), ratio =var.percent)
p2 <- plot_ly(data = df_scree,x = ~PC, y = ~ratio, type = "bar") %>%
layout(title = "Scree Plot of Principle components", xaxis = list(title = 'Principle Component'), yaxis = list(title = 'Variance(%)'))
htmltools::tagList(list(p1, p2))
}else{
# do pca analysis with meta groupign information
pca <-PCA_wrapper_prcomp2(data_matrix = as.matrix(df_intensity_log10), data_meta =  meta_table[,c(1,3)], inputation = TRUE)
# plotting
print(pca$pca_scree_plot)
cat("Scree plot ##  shows the performance of the PCA analysis, the more percentage the top procomponets accounts, the better separation")
print(pca$pca_component_plot)
cat("2d PCA Component plot ##")
print(pca$pca_confidence)
cat("2d PCA Component plot ## with confidence boundaries")
print(pca$pca_component_plot_kmeans)
cat("2d PCA Component plot with K-means grouping, which is non-supervised grouping ")
pca$pca_component_plot_3d_interactive
}
}
ncol(df_intensity) > 3
View(df_intensity)
s.null(meta_table
is.null(meta_table
)
pca <-PCA_wrapper_prcomp2(data_matrix = as.matrix(df_intensity_log10), data_meta =  meta_table[,c(1,3)], inputation = TRUE)
View(df_intensity_log10)
meta_table[,c(1,3)]
unlist(lapply(t,function(x)x[2])) ->t
t
strsplit(colnames(df_intensity), "_") ->t
t
unlist(lapply(t,function(x)x[2])) ->t
t
meta_table <- data.frame(rawfiles =  colnames(df_intensity), Experiments = colnames(df_intensity), Grouping =t)
write_tsv(meta_table, "proteinGroups1_meta.txt")
write_tsv(meta_table, "proteinGroups1_meta.txt")
length(unique(meta_table$grouping)) >=2
length(unique(meta_table[,3])) >=2
knitr::opts_chunk$set(echo = FALSE,warning = FALSE, message = FALSE, cache = FALSE)
# Description: pick up the significant pairs
# Arguments: p value matrix from pairwise.t.test like functions
# Values: list of the pairs
# Details:
# see data format by the following example
# attach(airquality)
# Month <- factor(Month, labels = month.abb[5:9])
# result<-pairwise.t.test(Ozone, Month)
# the inpute data is result$p.value
# threshold is 0.05 by default, can be changed to 0.01
find_p_location<-function(p_matrix, p_threshold=0.05){
xx <- which(p_matrix < p_threshold,arr.ind=TRUE)
if(length(xx) > 0){ # only perform the picking up if there is any significant one
ALL_significant_pairs <- NULL
for(i in 1:nrow(xx)){
#group1 name/dimention1 name:rownames(xx)[i]
#group2 name/dimention2 name:colnames(p_matrix)[xx[i,2]]
#p value: p_matrix[xx[i,1],xx[i,2]]
significant_pair <- paste0(p_matrix[xx[i,1],xx[i,2]],"(",rownames(xx)[i],"~",colnames(p_matrix)[xx[i,2]],"); ")
ALL_significant_pairs <- paste0(ALL_significant_pairs,significant_pair)
}
return(ALL_significant_pairs)
}else{
return("Inconsistent betwen p values  ANOVA and paired t.test")
# to pick up the significant pairs after posthoc analysis after anova
# sometimes using different p.adjust method for anova  and ttest
# therefore it's marked here if there is any inconcistency
}
}
# Description: pick up the significant pairs
# Arguments: p value matrix from pairwise.t.test like functions
# Values: list of the pairs
# Details:
# see data format by the following example
attach(airquality)
Month <- factor(Month, labels = month.abb[5:9])
Month
labels = month.abb[5:9]
labels
Month
airquality$Month
head(airquality)
pairwise.t.test
?pairwise.t.test
result<-pairwise.t.test(Ozone, Month)
result
?find_p_location
result$method
result$data.name
result$p.value
result$p.adjust.method
p_matrix <- result
p_threshold=0.05
xx <- which(p_matrix < p_threshold,arr.ind=TRUE)
p_matrix
p_matrix <- result$p.value
xx <- which(p_matrix < p_threshold,arr.ind=TRUE)
xx
p_matrix < p_threshold
which(p_matrix < p_threshold)
length(xx)
i<-1
#group1 name/dimention1 name:rownames(xx)[i]
#group2 name/dimention2 name:colnames(p_matrix)[xx[i,2]]
#p value: p_matrix[xx[i,1],xx[i,2]]
significant_pair <- paste0(p_matrix[xx[i,1],xx[i,2]],"(",rownames(xx)[i],"~",colnames(p_matrix)[xx[i,2]],"); ")
significant_pair
p<- PostHoc(Ozone, Month)
p
PostHoc<-function(vector, factor, p_threshold = 0.05){
p.value_anova <- anova(lm(as.numeric(vector)~as.factor(factor)))$Pr[1]
if(p.value_anova < 0.05){
p_PostHoc_matrix <- pairwise.t.test(as.numeric(vector),as.factor(factor),p.adj = "fdr")$p.value
p_PostHoc_pairs <- find_p_location(p_PostHoc_matrix, p_threshold = p_threshold) # find_p_location is the self define functions
return(c(p.value_anova,p_PostHoc_pairs))
}else{
return(NA)
}
}
p<- PostHoc(Ozone, Month)
p
PostHoc<-function(vector, factor, p_threshold = 0.05){
p.value_anova <- anova(lm(as.numeric(vector)~as.factor(factor)))$Pr[1]
if(p.value_anova < 0.05){
p_PostHoc_matrix <- pairwise.t.test(as.numeric(vector),as.factor(factor),p.adj = "fdr")$p.value
p_PostHoc_pairs <- find_p_location(p_PostHoc_matrix, p_threshold = p_threshold) # find_p_location is the self define functions
#return(c(p.value_anova,p_PostHoc_pairs))
return(p_PostHoc_pairs)
}else{
return(NA)
}
}
pvalues_anova <- matrix_PostHoc(df_intensity,meta_table[,3])
head(pvalues_anova)
PostHoc<-function(vector, factor, p_threshold = 0.05){
p.value_anova <- anova(lm(as.numeric(vector)~as.factor(factor)))$Pr[1]
if(p.value_anova < 0.05){
p_PostHoc_matrix <- pairwise.t.test(as.numeric(vector),as.factor(factor),p.adj = "fdr")$p.value
p_PostHoc_pairs <- find_p_location(p_PostHoc_matrix, p_threshold = p_threshold) # find_p_location is the self define functions
return(c(p.value_anova,p_PostHoc_pairs))
# return(p_PostHoc_pairs)
}else{
return(NA)
}
}
pvalues_anova <- matrix_PostHoc(df_intensity,meta_table[,3])
head(pvalues_anova)
PostHoc<-function(vector, factor, p_threshold = 0.05){
p.value_anova <- anova(lm(as.numeric(vector)~as.factor(factor)))$Pr[1]
if(p.value_anova < 0.05){
p_PostHoc_matrix <- pairwise.t.test(as.numeric(vector),as.factor(factor),p.adj = "fdr")$p.value
p_PostHoc_pairs <- find_p_location(p_PostHoc_matrix, p_threshold = p_threshold) # find_p_location is the self define functions
return(paste0(p.value_anova,p_PostHoc_pairs))
# return(p_PostHoc_pairs)
}else{
return(NA)
}
}
pvalues_anova <- matrix_PostHoc(df_intensity,meta_table[,3])
head(pvalues_anova)
find_p_location<-function(p_matrix, p_threshold=0.05){
xx <- which(p_matrix < p_threshold,arr.ind=TRUE)
if(length(xx) > 0){ # only perform the picking up if there is any significant one
ALL_significant_pairs <- NULL
for(i in 1:nrow(xx)){
#group1 name/dimention1 name:rownames(xx)[i]
#group2 name/dimention2 name:colnames(p_matrix)[xx[i,2]]
#p value: p_matrix[xx[i,1],xx[i,2]]
significant_pair <- paste0(p_matrix[xx[i,1],xx[i,2]],"(",rownames(xx)[i],"~",colnames(p_matrix)[xx[i,2]],"); ")
ALL_significant_pairs <- paste0(ALL_significant_pairs,significant_pair)
}
return(ALL_significant_pairs)
}else{
return("Failed in locating pairs")
# to pick up the significant pairs after posthoc analysis after anova
# sometimes using different p.adjust method for anova  and ttest
# therefore it's marked here if there is any inconcistency
}
}
PostHoc<-function(vector, factor, p_threshold = 0.05){
p.value_anova <- anova(lm(as.numeric(vector)~as.factor(factor)))$Pr[1]
if(p.value_anova < 0.05){
p_PostHoc_matrix <- pairwise.t.test(as.numeric(vector),as.factor(factor),p.adj = "fdr")$p.value
p_PostHoc_pairs <- find_p_location(p_PostHoc_matrix, p_threshold = p_threshold) # find_p_location is the self define functions
return(paste0("ANOVA p=",p.value_anova,";",p_PostHoc_pairs))
# return(p_PostHoc_pairs)
}else{
return(NA)
}
}
pvalues_anova <- matrix_PostHoc(df_intensity,meta_table[,3])
head(pvalues_anova)
?anova
df_intensity[1,]
df_intensity[1,] ->r
factor <- meta_table[,3]
vector <-r
p.value_anova <- anova(lm(as.numeric(vector)~as.factor(factor)))$Pr[1]
p.value_anova
pairwise.t.test(as.numeric(vector),as.factor(factor),p.adj = "fdr")$p.value
pairwise.t.test(as.numeric(vector),as.factor(factor))$p.value
pairwise.t.test(vector,factor)
pairwise.t.test(as.numeric(vector),as.factor(factor))$p.value
factor
pairwise.t.test(as.numeric(vector),factor)
vector
class(vector)
class(r)
v<- as.vector(vector)
v
class(v)
?pairwise.t.test
Ozone
r
class(v)
?as.vector
as.numeric(r)
pairwise.t.test(as.numeric(vector),as.factor(factor),p.adj = "fdr")
pairwise.t.test(as.numeric(vector),factor)
pairwise.t.test(as.numeric(df_intensity[,2]),factor)
pairwise.t.test(as.numeric(df_intensity[2,]),factor)
pairwise.t.test(as.numeric(df_intensity[3,]),factor)
?pairwise.t.test
pairwise.t.test(Ozone, Month)
factor
Month
Ozone
n <- 1000
for(i in 1:n){
i
}
for(i in 1:n){
print(i)
}
for(i in 1:n){
print(i)
}
n <- 10000
for(i in 1:n){
print(i)
}
n <- 100000
for(i in 1:n){
print(i)
}
n <- 1000000
for(i in 1:n){
print(i)
}
n <- 1000
system.time(for(i in 1:n){
print(i)
})
n <- 10000
system.time(for(i in 1:n){
print(i)
})
system.time(for(i in 1:n){
print(i)
})
n <- 1000000
system.time(for(i in 1:n){
print(i)
})
n <- 1000
n
1:100
1:n
