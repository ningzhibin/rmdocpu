## app.R ##
## this version is for shiny markdown test



# >run preparation -------------------------------------------------------------

# this is the option for my project, universal
options(stringsAsFactors = FALSE)
options(scipen=10)
options(shiny.maxRequestSize=100*1024^2) # change default maximun size from default 5M to 100M


source("subfunctions_general.r",local = TRUE)
source("subfunctions_general_update.r",local = TRUE)
source("shiny_modules.R",local = TRUE)


#install.packages(shinysky)  # install but do not library
# do not load the whole shinysky library, which will make the buttons ugly
install.packages.auto(shinydashboard)
install.packages.auto(shiny)
install.packages.auto(htmlwidgets)
install.packages.auto(DT) # for table
install.packages.auto(ggplot2)
install.packages.auto(plotly)
install.packages.auto(colourpicker)
install.packages.auto(d3heatmap) # for heatmap
install.packages.auto(reshape2)
install.packages.auto(GGally) # for paried
install.packages.auto(ggcorrplot) # for correlation plot
install.packages.auto(gplots) # heatmap.2
install.packages.auto(shinyBS)
install.packages.auto(shinyWidgets)




#  __header ------------------------------------------------------


header <- dashboardHeader(title = span(img(src="logo_imetalab.png", width = 150), "Maxquant Quick Summary"),
                          titleWidth = 470,
                          tags$li(class = "dropdown",
                                  tags$a(href="www.imetalab.ca", target="_blank", 
                                         tags$img(height = "18px", alt="SNAP Logo", src="logo_M.png")
                                  )
                          )
)


#  __side bar ------------------------------------------------------

sidebar <- dashboardSidebar(
  width = 250,
  sidebarMenu(
    id = "tabs",
    menuItem("Prepare Data", tabName = "dashboard", icon = icon("dashboard")),
    sidebarMenuOutput("menu"),
    menuItem("Gallery", tabName = "gallery", icon = icon("picture-o")),
    menuItem("About", tabName = "about", icon = icon("info-circle")),
    menuItem("iMetaLab", icon = icon("home"), 
             href = "http://www.imetalab.ca")
  )
)

#  _  ------------------------------------------------------
#  __body ------------------------------------------------------


body <- dashboardBody(
  
  
  tabItems(

    #  ___dashboard/starting  page  ------------------------------------------------------
    tabItem(tabName = "dashboard",
            
            fluidRow(
              
                  box(solidHeader = TRUE,
                      title = "Choose file to start with", 
                      status = "primary", 
                      width = 12,
                      # _____ select file type --------------------------------------
                      fluidRow(
                        column(6, 
                               radioGroupButtons("select_analysis_type", 
                                                 label = NULL, choices = c(
                                                   "summary.txt", "proteingroups.txt"
                                                   #, "proteinGroups.txt"
                                                 ), justified = FALSE
      
                               ),
                               br(),
                               radioButtons(inputId = "data_source", 
                                            label = "Choose data to start", 
                                            c("Upload data", "Sample dataset (with meta data)"),
                                            selected = "Upload data")
                               ),
                        column(6
                               )
                      ),
                      conditionalPanel(
                        condition = "output.data_table_upload_status",
                        fluidRow(
                          column(6,
                                 actionButton("goto_data_plotting", 
                                              icon = icon("arrow-right"),
                                              label = "Go to plotting",
                                              style="float:left; color: #fff; background-color: #337ab7; border-color: #2e6da4"
                                 ),
                                 bsTooltip("goto_data_plotting", "Do not click before you see the table loaded and displayed below",
                                           "left", options = list(container = "body"))
                                 )
                          
                        )
                        
                      )
                  ),
                  
                  
                  fluidRow(

                      column(4,
                             # _____ upload data ui --------------------------------------
                             conditionalPanel(
                               condition = "input.data_source == 'Upload data'",
                               UPLOAD_TABLE_UI2("data_table_upload", 
                                                boxwidth = 12, 
                                                check.names =  FALSE, 
                                                rownames = FALSE) # this is for data file
                             ),
                             
                             
                             # display more options after upload
                             conditionalPanel(
                               condition = "output.data_table_upload_status",
                               box(
                                 width = 12,
                                 status = "primary",
                                 solidHeader = TRUE,
                                 checkboxInput("if_preprocess_data", 'Process data matrix before plotting?', FALSE)
                               )
                             )
                      ),
                      column(8,
                             # _____ data table dispaly ui --------------------------------------
                             conditionalPanel(
                               condition = "output.data_table_upload_status",
                               DATATABLE_Display_UI("data_table_display",boxwidth = 12,
                                                    boxtitle = "Data")
                             )
                      )
                      
                      
                    ),
                    # for meta data
                    fluidRow(
                      column(4,
                             # _____ upload meta data ui --------------------------------------
                             conditionalPanel(
                               condition = "input.data_source == 'Upload data'",
                               UPLOAD_TABLE_UI2("meta_table_upload", 
                                               boxwidth = 12, 
                                               rownames = FALSE,
                                               check.names =  FALSE,
                                               collapsed =  TRUE,
                                               boxtitle = "Upload meta file (tsv/csv, Optional)"
                                               ) # this is for data file
                             )
                      ),
                      column(8,
                             # _____ data table dispaly ui --------------------------------------
                             conditionalPanel(
                               condition = "output.meta_table_upload_status",
                               DATATABLE_Display_UI("meta_table_display",
                                                    boxwidth = 12,
                                                    boxtitle = "Meta data (Optional)"
                                                    )
                             )
                      )
                      
                      
                    )
                  #,
                    #_____________________________________________________
                    
                      # conditionalPanel(
                      #   condition = "output.data_table_upload_status",
                      #   column(12,
                      #     actionButton("goto_data_plotting", 
                      #                  icon = icon("arrow-right"),
                      #                  label = "Go to plotting",
                      #                  style="float:right; color: #fff; background-color: #337ab7; border-color: #2e6da4"
                      #     ),
                      #     bsTooltip("goto_data_plotting", "Do not click before you see the table loaded and displayed below",
                      #               "left", options = list(container = "body"))
                      #   )
                      #   
                      # )
                  #)

              
            )
  
    ),
    
    #  __ Panel:  plotting------------------------------------------------------
    
    
    tabItem(tabName = "plottings",
            fluidRow(
              column(12,
                     # _____ for summary.txt --------------------------------------
                     conditionalPanel(
                       condition = "input.select_analysis_type == 'summary.txt'",
                       ## settings and plot here
                         fluidRow(
                           column(12,
                                  MQ_SUMMARY_UI("demo")
                                  )
                          ),
                         fluidRow(
                            box(
                             width = 4,
                             solidHeader = TRUE,
                             status = "primary",
                             wellPanel(
                               
                             ),
                             fluidRow(
                               column(6,
                                      downloadButton('DownloadReport_MTML')
                                      ),
                               column(6,
                                 actionButton("Report", 
                                              icon = icon("paper-plane"),
                                              label = "Report",
                                              style="float:right; color: #fff; background-color: #337ab7; border-color: #2e6da4"
                                 )
                               )
                             )
                           ),
                           box(
                             width = 8,
                             solidHeader = TRUE,
                             status = "primary",
                             
                             wellPanel(
                               dataTableOutput('table')
                               
                             )
                           )
                         )
                      )
                    )
                     #  ,
                     # conditionalPanel(
                     #   condition = "input.select_analysis_type == 'proteinGroups.txt'"
                     # )
              )
            
    ),
    source("sources/ui_pannel_gallery.R", local = FALSE)$value,
    source("sources/ui_pannel_about.R", local = FALSE)$value
    
  ),

  #   CSS section ignore for analysis
  tags$head(
    tags$link(rel = "stylesheet", type = "text/css", href = "custom.css")
  ),
  #Semi-collapsible sidebar
  tags$script(HTML("$('body').addClass('sidebar-mini');"))
  
)

#  _  ------------------------------------------------------
server <- function(input, output, session) {

  
  #  __ get data_table ------------------------------------------------------
  data_table <- reactive({
    if(input$data_source == "Sample dataset (with meta data)"){
      switch(input$select_analysis_type,
             "summary.txt" = {
               read.delim("www/22122017_Colon_Aging_summary.txt",  header = TRUE, check.names = FALSE)
               #read.delim("www/summary.txt",  header = TRUE, check.names = FALSE)
             },
             "proteinGroups.txt" = {
               read.delim("www/22122017_Colon_Aging_proteinGroups.txt",  header = TRUE, check.names = FALSE)
             }
      )
      
    }else{
      withConsoleRedirect("console_error",{
        callModule(UPLOAD_TABLE2, "data_table_upload", display_after = FALSE) # call this within the withConsoleRedirect will catch the error message and display
      })
    }
  })
  
  # mark the data table status
  output$data_table_upload_status <- reactive({
    return(!is.null(data_table()))
  })
  outputOptions(output, 'data_table_upload_status', suspendWhenHidden=FALSE)
  
  
  
  #_____ for data prepocess before plotting--------------------------------------
  rvalues <- reactiveValues()
  
  observe({
    if(input$if_preprocess_data){
      # the logic is that if user choose to process data, call the modue, take the returned value
      # otherwise setup a conduct/pipe
      
      Data_processed <- callModule(datatableProcess, "data_table_preprocess", data_table())
    }else{
      Data_processed <- reactive({data_table()})
    }
    
    # put the returned reacitve expression into new reative values list, for easy downstream useages
    rvalues$Data_processed <- Data_processed()
    
    # display the table
    callModule(DATATABLE_Display, "data_table_display",
               data_table = rvalues$Data_processed,
               filename_tag = "data_table",
               height = 300)
    
    
    
  })
  
  # render new menu items
  output$menu <- renderMenu({
    if (!is.null(data_table())) {
      sidebarMenu(
        menuItem("Plot Diagram", tabName = "plottings", icon = icon("bar-chart"))
      )
    }
  })
  
  
  
  
  #  __ get meta_table ------------------------------------------------------
  meta_table <- reactive({
    if(input$data_source == "Sample dataset (with meta data)"){
      read.delim("www/meta.txt",  header = TRUE, check.names = FALSE)
    }else{
      withConsoleRedirect("console_error",{
        callModule(UPLOAD_TABLE2, "meta_table_upload",display_after = FALSE) # call this within the withConsoleRedirect will catch the error message and display
      })
    }
  })
  
  # mark the data table status
  output$meta_table_upload_status <- reactive({
    return(!is.null(meta_table()))
  })
  outputOptions(output, 'meta_table_upload_status', suspendWhenHidden=FALSE)
  
  
  
  # display the meta table
  observe({
    
    head(meta_table())# I do not understannd here, I have to "use" this reactive expression once to make it work in the next module
    callModule(DATATABLE_Display, "meta_table_display",
               data_table = meta_table(),
               filename_tag = "meta_table",
               height = 300)
    
  })

  

  #  __ for summary.txt ------------------------------------------------------
  observe({
   if(input$select_analysis_type == "summary.txt" && !is.null(rvalues$Data_processed)){
    # take the data
    
      sm_rawfiles <- organize_summary.txt(rvalues$Data_processed)$summary_rawfiles
      
      # note that the desired columns could be nemeric or integer
      sm_rawfiles_numeric <-  sm_rawfiles[,c(1,2, which(unlist(lapply(1: ncol(sm_rawfiles), function(x){class(sm_rawfiles[[x]]) != "character"}))))]
      #print(head(sm_rawfiles_numeric))
      
      callModule(MQ_SUMMARY, "demo", data_frame = sm_rawfiles_numeric, meta = meta_table())
      
     
      if(input$Report > 0){
        
        output$table <- renderDataTable(iris)
        
        render_file <-  rmarkdown::render("MyDocument.Rmd", params = list(data = mtcars ))
        
        
        
      }

      output$DownloadReport_MTML <- downloadHandler(
        filename = "test.zip",
        content = function(file){
          files <- rmarkdown::render("MyDocument.Rmd", params = list(data = mtcars ))  %>% basename
          #files <- lapply(flower_species(), function(i) {
            #rmarkdown::render('test.Rmd', rmarkdown::pdf_document(), output_file = paste0(i, ".pdf"), params = list(species = i))
          #}) %>% unlist %>% basename
          zip(file, files)
          file
          
        }
      )
    
   }
    
    
    
    
  })
  

  
  
  
  
  
  
  
  
  
  
  
  #__ switch tab--------------------------------------
  
  observeEvent(
    input$goto_data_plotting, {
      updateTabItems(session, "tabs", "plottings")
    }
  )

}


#  App entrance: main  ------------------------------------------------------
# 
ui <- dashboardPage(header, sidebar, body, title = "separate title")
shinyApp(ui, server)





